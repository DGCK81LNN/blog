<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh_CN"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://dgck81lnn.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://dgck81lnn.github.io/blog/" rel="alternate" type="text/html" hreflang="zh_CN" /><updated>2025-09-24T09:20:19+08:00</updated><id>https://dgck81lnn.github.io/blog/feed.xml</id><title type="html">LNN的博客！</title><author><name>DGCK81LNN</name></author><entry><title type="html">Uiua 99bottles</title><link href="https://dgck81lnn.github.io/blog/posts/241229_uiua_99bottles" rel="alternate" type="text/html" title="Uiua 99bottles" /><published>2024-12-29T23:21:51+08:00</published><updated>2024-12-29T23:21:51+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/uiua_99bottles</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/241229_uiua_99bottles"><![CDATA[<h1 id="uiua-99bottles"><a href="https://uiua.org" target="_blank"><img src="https://www.uiua.org/assets/uiua-logo.png" alt="" style="height:1em;vertical-align:bottom" class="me-1" />Uiua</a> 99bottles</h1>

<p>Uiua 是一门还在迭代开发中的、基于堆栈（stack-based）的阵列编程（array programming）语言，在设计上借鉴了 BQN、APL、J 语言。</p>

<div class="language-uiua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">瓶</span><span class="w"> </span><span class="p">←</span><span class="w"> </span><span class="p">(</span><span class="w">
  </span><span class="kd">⍣</span><span class="p">(</span><span class="s">"No"</span><span class="w"> </span><span class="sc">@s</span><span class="w"> </span><span class="k">°</span><span class="m">0</span><span class="p">|</span><span class="m">1</span><span class="w"> </span><span class="s">""</span><span class="w"> </span><span class="k">°</span><span class="m">1</span><span class="p">|:</span><span class="sc">@s</span><span class="p">)</span><span class="w">
  </span><span class="s">$"</span><span class="si">_</span><span class="s"> bottle</span><span class="si">_</span><span class="s"> of beer"</span><span class="w">
</span><span class="p">)</span><span class="w">
</span><span class="n">墙</span><span class="w"> </span><span class="p">←</span><span class="w"> </span><span class="s">$"</span><span class="si">_</span><span class="s"> on the wall"</span><span class="w"> </span><span class="n">瓶</span><span class="w">
</span><span class="n">拿</span><span class="w"> </span><span class="p">←</span><span class="w"> </span><span class="kd">⍣</span><span class="p">(</span><span class="w">
  </span><span class="k">⍩</span><span class="p">(</span><span class="s">$"Go to the store, buy some more,\n</span><span class="si">_</span><span class="s">"</span><span class="w"> </span><span class="n">墙</span><span class="m">99</span><span class="p">)</span><span class="w"> </span><span class="k">°</span><span class="m">0</span><span class="w">
</span><span class="p">|</span><span class="w"> </span><span class="k">⍩</span><span class="p">(</span><span class="s">$"Take one down, pass it around,\n</span><span class="si">_</span><span class="s">"</span><span class="w"> </span><span class="n">墙</span><span class="o">-</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">

</span><span class="nb">⇌⇡</span><span class="m">100</span><span class="w">
</span><span class="nb">&amp;p</span><span class="w"> </span><span class="k">/</span><span class="s">$"</span><span class="si">_</span><span class="s">\n\n</span><span class="si">_</span><span class="s">"</span><span class="w"> </span><span class="k">≡</span><span class="p">(</span><span class="nb">□</span><span class="s">$"</span><span class="si">_</span><span class="s">,\n</span><span class="si">_</span><span class="s">.\n</span><span class="si">_</span><span class="s">."</span><span class="w"> </span><span class="kd">⊃</span><span class="p">(</span><span class="n">墙</span><span class="p">|</span><span class="n">瓶</span><span class="p">|</span><span class="n">拿</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p><a href="https://uiua.org/pad?src=0_15_0-dev_1__55O2IOKGkCAoCiAg4o2jKCJObyIgQHMgwrAwfDEgIiIgwrAxfDpAcykKICAkIl8gYm90dGxlXyBvZiBiZWVyIgopCuWimSDihpAgJCJfIG9uIHRoZSB3YWxsIiDnk7YK5ou_IOKGkCDijaMoCiAg4o2pKCQiR28gdG8gdGhlIHN0b3JlLCBidXkgc29tZSBtb3JlLFxuXyIg5aKZOTkpIMKwMAp8IOKNqSgkIlRha2Ugb25lIGRvd24sIHBhc3MgaXQgYXJvdW5kLFxuXyIg5aKZLTEpCikKCuKHjOKHoTEwMAomcCAvJCJfXG5cbl8iIOKJoSjilqEkIl8sXG5fLlxuXy4iIOKKgyjlopl855O2fOaLvykpCg==" target="_blank">在 Pad 中运行</a></p>

<p>我以前没有接触过阵列编程语言；花费<abbr title="2024-12-26 14:10—18:09 (中国标准时间)">一个下午</abbr>学习了 Uiua（起因是<em>预防</em>在群里分享了一段用 Uiua 合成音频的代码）后我立刻喜欢上了这门语言。</p>

<p>Uiua 中大部分的内置函数和修饰符都有名称和符号形式；编写代码时直接输入名称或缩写，解释器或 IDE 扩展的格式化功能会将名称或缩写转换成对应的符号。</p>

<details class="mb-3">
  <summary class="btn btn-info user-select-auto">上述代码改用内置函数和修饰符的名称写法，看起来是这样…<div class="text-dark text-opacity-50 small" style="line-height:1">（没有语法高亮，因为我懒得支持名称写法，<div class="d-inline-block text-start" style="font-size:0.5rem;line-height:1.15;vertical-align:-0.1em">是的上面的 Uiua 语法高亮支持是我自己写的，<div style="font-size:0.35rem">人家可是 Rust 项目，哪里会有人给 Ruby 的语法高亮模块提供支持</div></div>）</div></summary>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>瓶 ← (
  try("No" @s un0|1 "" un1|:@s)
  $"_ bottle_ of beer"
)
墙 ← $"_ on the wall" 瓶
拿 ← try(
  case($"Go to the store, buy some more,\n_" 墙99) un0
| case($"Take one down, pass it around,\n_" 墙-1)
)

reverserange100
&amp;p /$"_\n\n_" rows(box$"_,\n_.\n_." fork(墙|瓶|拿))
</code></pre></div>  </div>

</details>

<h2 id="99bottles-程序代码剖析">99bottles 程序代码剖析</h2>

<p>不妨来讲解一下这段代码。</p>

<p>首先我定义了三个函数：<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">瓶</span></code>、<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">墙</span></code>、<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">拿</span></code>。它们都接受一个参数，返回一个结果；对于不熟悉 Uiua 的人，这一点可能很难看出，但在 IDE 中，鼠标悬浮这些函数名可以看到“<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kt">|1.1</span></code>”，这就是函数接受的参数和返回的结果数量，通常是可以通过函数内容推断出来的，因此不需要显式写出。</p>

<p>一开始我用的函数名是 <code class="language-plaintext highlighter-rouge">Br</code>、<code class="language-plaintext highlighter-rouge">Wl</code>、<code class="language-plaintext highlighter-rouge">Tk</code>，但看到 Uiua 的 Discord 群组里有人提到了汉字，我就突然想到用汉字作标识符，好像还挺不错。Uiua 里似乎任何一个没有特殊含义的字符都可以作标识符，汉字或其他语言的字母等字符也可以多个组合为一个标识符。</p>

<p>左箭头表示赋值；编写代码时可以直接输入成等号。圆括号表示函数体，有时可以省略。通常，每行 Uiua 代码从整体上看都是<strong>从右往左执行</strong>的。</p>

<h3 id="瓶"><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">瓶</span></code></h3>

<div class="language-uiua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">瓶</span><span class="w"> </span><span class="p">←</span><span class="w"> </span><span class="p">(</span><span class="w">
  </span><span class="kd">⍣</span><span class="p">(</span><span class="s">"No"</span><span class="w"> </span><span class="sc">@s</span><span class="w"> </span><span class="k">°</span><span class="m">0</span><span class="p">|</span><span class="m">1</span><span class="w"> </span><span class="s">""</span><span class="w"> </span><span class="k">°</span><span class="m">1</span><span class="p">|:</span><span class="sc">@s</span><span class="p">)</span><span class="w">
  </span><span class="s">$"</span><span class="si">_</span><span class="s"> bottle</span><span class="si">_</span><span class="s"> of beer"</span><span class="w">
</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>函数 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">瓶</span></code> 实现了输入瓶数，如果是 0，返回“No bottles of beer”；如果是 1，返回“1 bottle of beer”；否则返回“<em>&lt;瓶数&gt;</em> bottles of beer”。圆括号中首先映入眼帘的是修饰符 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> 与一个函数包——竖线分隔的三个函数 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="s">"No"</span><span class="w"> </span><span class="sc">@s</span><span class="w"> </span><span class="k">°</span><span class="m">0</span></code>、<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="m">1</span><span class="w"> </span><span class="s">""</span><span class="w"> </span><span class="k">°</span><span class="m">1</span></code>、<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="p">:</span><span class="sc">@s</span></code>。<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> 依次尝试执行这三个函数，直到有一个成功执行、没有报错为止。</p>

<ol>
  <li>
    <p><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="s">"No"</span><span class="w"> </span><span class="sc">@s</span><span class="w"> </span><span class="k">°</span><span class="m">0</span></code></p>

    <p><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">°</span></code><code class="language-plaintext highlighter-rouge">un</code> 是一个一元修饰符，表示逆转一个函数的操作。这里被逆转的是……实数字面量 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="m">0</span></code>。正常执行时，实数字面量会将实数入栈。而“将实数 0 入栈”的逆操作就是出栈一个值，但如果它不是 0 就会报错。</p>

    <p>因此，在本分支中，如果 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">瓶</span></code> 收到的参数是实数 0，就会将这个 0 出栈，并继续执行本函数的剩余部分 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="s">"No"</span><span class="w"> </span><span class="sc">@s</span></code>，即将字符字面量 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="sc">@s</span></code>、字符串 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="s">"No"</span></code> 依次入栈。否则继续尝试下一个分支。这是通过异常处理实现的一种逻辑判断与流程控制，在其他编程语言中可能不是什么好方法，但在 Uiua 这样的语言中我很喜欢。</p>
  </li>
  <li>
    <p><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="m">1</span><span class="w"> </span><span class="s">""</span><span class="w"> </span><span class="k">°</span><span class="m">1</span></code></p>

    <p>同理，出栈一个值，如果是数字 1 就会将空字符串和数字 1 入栈；否则报错，继续执行下一分支。</p>
  </li>
  <li>
    <p><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="p">:</span><span class="sc">@s</span></code></p>

    <p>如果参数既不是 0 也不是 1，就将字符字面量 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="sc">@s</span></code> 入栈，然后让栈顶的两个值互换位置——<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="sc">@s</span></code> 在下，瓶数在上。</p>
  </li>
</ol>

<p>最后是格式化字符串 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="s">$"</span><span class="si">_</span><span class="s"> bottle</span><span class="si">_</span><span class="s"> of beer"</span></code>，它其实是一个 <abbr title="接受 2 个参数、返回 1 个结果"><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kt">|2.1</span></code></abbr> 的函数，会把刚刚入栈的两个值弹出并依次填入两个下划线处。于是，填入第一个空的就是输入的瓶数，但 0 瓶时会填入“No”；第二个空紧跟在“bottle”后面，是 1 瓶时就填入空字符串，否则填入字符 <code class="language-plaintext highlighter-rouge">s</code>。返回填充后的字符串。</p>

<h3 id="墙"><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">墙</span></code></h3>

<div class="language-uiua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">墙</span><span class="w"> </span><span class="p">←</span><span class="w"> </span><span class="s">$"</span><span class="si">_</span><span class="s"> on the wall"</span><span class="w"> </span><span class="n">瓶</span><span class="w">
</span></code></pre></div></div>

<p>函数 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">墙</span></code> 同样接受一个瓶数参数，直接用这个瓶数调用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">瓶</span></code> 并在结果后面加上空格和“on the wall”然后返回。</p>

<h3 id="拿"><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">拿</span></code></h3>

<div class="language-uiua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">拿</span><span class="w"> </span><span class="p">←</span><span class="w"> </span><span class="kd">⍣</span><span class="p">(</span><span class="w">
  </span><span class="k">⍩</span><span class="p">(</span><span class="s">$"Go to the store, buy some more,\n</span><span class="si">_</span><span class="s">"</span><span class="w"> </span><span class="n">墙</span><span class="m">99</span><span class="p">)</span><span class="w"> </span><span class="k">°</span><span class="m">0</span><span class="w">
</span><span class="p">|</span><span class="w"> </span><span class="k">⍩</span><span class="p">(</span><span class="s">$"Take one down, pass it around,\n</span><span class="si">_</span><span class="s">"</span><span class="w"> </span><span class="n">墙</span><span class="o">-</span><span class="m">1</span><span class="p">)</span><span class="w">
</span><span class="p">)</span><span class="w">
</span></code></pre></div></div>

<p>又是 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> 与一个函数包。第一个函数先 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">°</span><span class="m">0</span></code>，如果成功（瓶数是 0），就执行一个被 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 修饰的函数。</p>

<p><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 修饰符会执行它的函数，但如果函数报错，错误会<strong>穿过一层</strong> <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> 而<strong>不被捕获</strong>。在用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> 进行流程控制时经常会使用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 来区分模式匹配失败与其他异常：将模式匹配放在 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 外面，使异常被 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> 捕获，从而在<strong>不匹配时执行下一个</strong> <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> 分支；将匹配成功后要执行的逻辑放在 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 里面，如果出现异常，使异常<strong>不被</strong> <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍣</span></code><code class="language-plaintext highlighter-rouge">try</code> <strong>捕获，照常报错</strong>。本程序中 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 内的逻辑实际上永远也不会报错，但加上 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 或许是个好习惯（</p>

<p>于是当瓶数是 0 时，执行 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 内的函数：用实数 99 调用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">墙</span></code>，将结果加在“Go to the store, buy some more,”后面，形成最后一段歌词的后两句。如果第一个函数的模式匹配失败，即瓶数不是 0，转而执行第二个分支，里面也是 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">⍩</span></code><code class="language-plaintext highlighter-rouge">case</code> 包裹的逻辑：用减一后的瓶数调用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">墙</span></code>，加在“Take one down, pass it around,”后面，得到普通段的后两句歌词。</p>

<h3 id="主流程">主流程</h3>

<div class="language-uiua highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">⇌⇡</span><span class="m">100</span><span class="w">
</span><span class="nb">&amp;p</span><span class="w"> </span><span class="k">/</span><span class="s">$"</span><span class="si">_</span><span class="s">\n\n</span><span class="si">_</span><span class="s">"</span><span class="w"> </span><span class="k">≡</span><span class="p">(</span><span class="nb">□</span><span class="s">$"</span><span class="si">_</span><span class="s">,\n</span><span class="si">_</span><span class="s">.\n</span><span class="si">_</span><span class="s">."</span><span class="w"> </span><span class="kd">⊃</span><span class="p">(</span><span class="n">墙</span><span class="p">|</span><span class="n">瓶</span><span class="p">|</span><span class="n">拿</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>用整数 100 调用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="nb">⇡</span></code><code class="language-plaintext highlighter-rouge">range</code>，再用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="nb">⇌</span></code><code class="language-plaintext highlighter-rouge">reverse</code> 转换，得到 99 到 0 的整数组成的降序数组。</p>

<p>修饰符 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">≡</span></code><code class="language-plaintext highlighter-rouge">rows</code> 对这个数组的每一项调用一元（<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kt">|1.1</span></code>）函数 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="nb">□</span><span class="s">$"</span><span class="si">_</span><span class="s">,\n</span><span class="si">_</span><span class="s">.\n</span><span class="si">_</span><span class="s">."</span><span class="w"> </span><span class="kd">⊃</span><span class="p">(</span><span class="n">墙</span><span class="p">|</span><span class="n">瓶</span><span class="p">|</span><span class="n">拿</span><span class="p">)</span></code>（相当于瓶数从 99 到 0 递减执行），将结果组成一个新的数组：</p>

<ul>
  <li>
    <p><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⊃</span><span class="p">(</span><span class="n">墙</span><span class="p">|</span><span class="n">瓶</span><span class="p">|</span><span class="n">拿</span><span class="p">)</span></code>：修饰符 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⊃</span></code><code class="language-plaintext highlighter-rouge">fork</code> 用同一个参数分别调用其函数包里的三个函数，返回三个结果。这里用瓶数分别调用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">瓶</span></code>、<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">墙</span></code>、<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="n">拿</span></code>，分别得到一段歌词的第一句、第二句和后两句。</p>
  </li>
  <li>
    <p><code class="language-uiua highlight language-uiua highlighter-rouge"><span class="nb">□</span><span class="s">$"</span><span class="si">_</span><span class="s">,\n</span><span class="si">_</span><span class="s">.\n</span><span class="si">_</span><span class="s">."</span></code>：将得到的三个字符串组合在一起，加上标点和换行，然后 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="nb">□</span></code><code class="language-plaintext highlighter-rouge">box</code> 装盒返回。由于 Uiua 中字符串就是字符数组，而二维数组中每项的长度必须相同，这里必须将字符串用 box 封装，使 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">≡</span></code><code class="language-plaintext highlighter-rouge">rows</code> 形成一个一维 box 数组而非二维字符数组。</p>
  </li>
</ul>

<p>得到由 100 段歌词组成的一维 box 数组。修饰符 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="k">/</span></code><code class="language-plaintext highlighter-rouge">reduce</code> 可将数组用一个二元函数累加起来，我们使用格式化字符串 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="s">$"</span><span class="si">_</span><span class="s">\n\n</span><span class="si">_</span><span class="s">"</span></code> 作为这个二元函数，也就实现了以两个换行符作为分隔，将 100 个字符串拼合在一起。最后，使用 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="nb">&amp;p</span></code> 函数输出这个字符串（末尾自动加一个换行）。</p>

<h2 id="结语">结语</h2>

<p>Uiua 语言还有很多有趣的特性没有在本程序中体现：用来操作栈值的行星记法（Planet notation），功能强大的 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="kd">⍜</span></code><code class="language-plaintext highlighter-rouge">under</code> 修饰符，内置的一系列测试数据常量（包括两张彩色图片 <code class="language-uiua highlight language-uiua highlighter-rouge"><span class="no">Lena</span></code>、<code class="language-uiua highlight language-uiua highlighter-rouge"><span class="no">Cats</span></code> <small>和 13 种 LGBTQIA+ 骄傲旗的颜色值</small>）……</p>

<p><small>后面忘了</small></p>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="日常写代码" /><summary type="html"><![CDATA[Uiua 99bottles Uiua 是一门还在迭代开发中的、基于堆栈（stack-based）的阵列编程（array programming）语言，在设计上借鉴了 BQN、APL、J 语言。 瓶 ← ( ⍣("No" @s °0|1 "" °1|:@s) $"_ bottle_ of beer" ) 墙 ← $"_ on the wall" 瓶 拿 ← ⍣( ⍩($"Go to the store, buy some more,\n_" 墙99) °0 | ⍩($"Take one down, pass it around,\n_" 墙-1) ) ⇌⇡100 &amp;p /$"_\n\n_" ≡(□$"_,\n_.\n_." ⊃(墙|瓶|拿)) 在 Pad 中运行]]></summary></entry><entry><title type="html">“ruby，一款好用的 esolang”</title><link href="https://dgck81lnn.github.io/blog/posts/240429_rbfxck" rel="alternate" type="text/html" title="“ruby，一款好用的 esolang”" /><published>2024-04-29T17:10:55+08:00</published><updated>2024-04-29T17:10:55+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/rbfxck</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/240429_rbfxck"><![CDATA[<h1 id="ruby一款好用的-esolang">“ruby，一款好用的 esolang”</h1>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vg">$&gt;</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="s2">""</span><span class="o">&lt;&lt;~-~-~-~-~-~-~-~-</span><span class="p">(</span><span class="o">-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;-~-~-~-~-~</span><span class="p">(</span><span class="o">-~</span>
<span class="o">-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;~-~-~-~-</span><span class="p">(</span><span class="o">-~-~-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">(</span>
<span class="p">[]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;~-~-~-~-</span><span class="p">(</span><span class="o">-~-~-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;~-</span><span class="p">(</span><span class="o">-~-~-~-~-~-~</span>
<span class="o">-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;~-~-~-~-</span><span class="p">(</span><span class="o">-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;</span><span class="p">(</span>
<span class="p">([[]]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;-~-~-~-~-~-~-~</span><span class="p">(</span><span class="o">-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">(</span>
<span class="p">[]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;~-</span><span class="p">(</span><span class="o">-~-~-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;-~-~</span><span class="p">(</span><span class="o">-~-~-~-~-~-~-~</span><span class="p">([</span>
<span class="p">]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;~-~-~-~-</span><span class="p">(</span><span class="o">-~-~-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span>
<span class="p">)</span><span class="o">&lt;&lt;-~-~-~-~</span><span class="p">(</span><span class="o">-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;-~</span><span class="p">(([[]]</span><span class="o">&lt;=&gt;</span><span class="p">[])</span><span class="o">&lt;&lt;-~-~-~-~-~</span><span class="p">([</span>
<span class="p">]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span><span class="o">&lt;&lt;-~-~-~-~-~-~-~-~-~-~</span><span class="p">([]</span><span class="o">&lt;=&gt;</span><span class="p">[]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, World!
</code></pre></div></div>

<p>Ruby 语言有很多有趣的特性：包含循环引用的数据之间可以比较是否相等，重载运算符就是定义以运算符为名称的方法，可以用 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="n">字符串</span> <span class="o">&lt;&lt;</span> <span class="n">字符串或字符编码</span></code> 向字符串追加内容，整数可以像比特组成的数组一样被索引和切片，“全局函数”实际上是 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="no">Kernel</span></code> 模块的私有方法，<code class="language-ruby highlight language-ruby highlighter-rouge"><span class="no">Object</span></code> 的 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="nb">display</span></code> 方法等价于 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="nb">print</span></code> 函数……</p>

<h3 id="esoteric-ruby">Esoteric Ruby</h3>

<p>前些天，<del>热爱 Esolang 的</del>群友“<em>预防</em>”尝试写出不包含字母的 Ruby 程序。首先他想到了 <code class="language-plaintext highlighter-rouge">String#&lt;&lt;</code>。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="s2">""</span> <span class="o">&lt;&lt;</span> <span class="mi">72</span> <span class="o">&lt;&lt;</span> <span class="mi">101</span> <span class="o">&lt;&lt;</span> <span class="mi">108</span> <span class="o">&lt;&lt;</span> <span class="mi">108</span> <span class="o">&lt;&lt;</span> <span class="mi">111</span> <span class="o">&lt;&lt;</span> <span class="mi">44</span> <span class="o">&lt;&lt;</span> <span class="mi">32</span>
    <span class="o">&lt;&lt;</span> <span class="mi">87</span> <span class="o">&lt;&lt;</span> <span class="mi">111</span> <span class="o">&lt;&lt;</span> <span class="mi">114</span> <span class="o">&lt;&lt;</span> <span class="mi">108</span> <span class="o">&lt;&lt;</span> <span class="mi">100</span> <span class="o">&lt;&lt;</span> <span class="mi">33</span> <span class="o">&lt;&lt;</span> <span class="mi">10</span><span class="p">).</span><span class="nf">display</span>
</code></pre></div></div>

<p>（如果启用了 <code class="language-plaintext highlighter-rouge">frozen_string_literal</code>，需将 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="s2">""</span></code> 改为 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="o">+</span><span class="s2">""</span></code>：一元正号运算符可以复制冻结的字符串，得到一个未冻结的副本。）</p>

<p>如何不使用字母调用 <code class="language-plaintext highlighter-rouge">Object#display</code> 呢？试试 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="no">Symbol</span></code>。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">""</span> <span class="o">&lt;&lt;</span> <span class="mi">100</span> <span class="o">&lt;&lt;</span> <span class="mi">105</span> <span class="o">&lt;&lt;</span> <span class="mi">115</span> <span class="o">&lt;&lt;</span> <span class="mi">112</span> <span class="o">&lt;&lt;</span> <span class="mi">108</span> <span class="o">&lt;&lt;</span> <span class="mi">97</span> <span class="o">&lt;&lt;</span> <span class="mi">121</span> <span class="c1"># =&gt; "display"</span>
<span class="ss">:"</span><span class="si">#{</span><span class="s2">""</span> <span class="o">&lt;&lt;</span> <span class="mi">100</span> <span class="o">&lt;&lt;</span> <span class="mi">105</span> <span class="o">&lt;&lt;</span> <span class="mi">115</span> <span class="o">&lt;&lt;</span> <span class="mi">112</span> <span class="o">&lt;&lt;</span> <span class="mi">108</span> <span class="o">&lt;&lt;</span> <span class="mi">97</span> <span class="o">&lt;&lt;</span> <span class="mi">121</span><span class="si">}</span><span class="ss">"</span> <span class="c1"># =&gt; :display</span>
</code></pre></div></div>

<p>然而，如何通过方法名的 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="no">Symbol</span></code> 调用方法？正常情况下……</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="ss">:display</span><span class="p">)</span>
<span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">.</span><span class="nf">method</span><span class="p">(</span><span class="ss">:display</span><span class="p">).</span><span class="nf">call</span>
<span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">.</span><span class="nf">method</span><span class="p">(</span><span class="ss">:display</span><span class="p">)</span><span class="o">.</span><span class="p">()</span>
<span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">.</span><span class="nf">method</span><span class="p">(</span><span class="ss">:display</span><span class="p">)[]</span>
<span class="no">String</span><span class="p">.</span><span class="nf">instance_method</span><span class="p">(</span><span class="ss">:display</span><span class="p">).</span><span class="nf">bind</span><span class="p">(</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">).</span><span class="nf">call</span>
<span class="no">String</span><span class="p">.</span><span class="nf">instance_method</span><span class="p">(</span><span class="ss">:display</span><span class="p">).</span><span class="nf">bind_call</span><span class="p">(</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
<span class="nb">lambda</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:display</span><span class="p">).</span><span class="nf">call</span><span class="p">(</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
<span class="nb">lambda</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:display</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
<span class="nb">lambda</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:display</span><span class="p">)[</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">]</span>
</code></pre></div></div>

<p>不管用怎样<em>刁钻</em>的方式调用方法，都会引入新的方法/函数调用。但后来我发现：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">greet</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">proc</span><span class="p">)</span>
  <span class="nb">proc</span><span class="p">[</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">]</span>
<span class="k">end</span>
<span class="n">greet</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:display</span><span class="p">)</span> <span class="c1"># 输出 Hello, World!</span>
</code></pre></div></div>

<p>通过定义一个<strong>接受块的函数</strong>，可以在不调用方法的情况下<strong>把 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="no">Symbol</span></code> 转换成 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="no">Proc</span></code></strong>（<code class="language-ruby highlight language-ruby highlighter-rouge"><span class="nb">lambda</span></code>）。而这个 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="n">greet</span></code> 函数可以写成<strong>箭头函数</strong>：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">greet</span> <span class="o">=</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="o">&amp;</span><span class="nb">proc</span><span class="p">)</span> <span class="p">{</span> <span class="nb">proc</span><span class="p">[</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">]</span> <span class="p">}</span>
<span class="n">greet</span><span class="o">.</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:display</span><span class="p">)</span> <span class="c1"># 输出 Hello, World!</span>
</code></pre></div></div>

<p>把箭头函数内联，改一下变量名，就得到：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="o">-&gt;</span> <span class="p">(</span><span class="o">&amp;</span><span class="n">_</span><span class="p">)</span> <span class="p">{</span> <span class="n">_</span><span class="p">[</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">]</span> <span class="p">})</span><span class="o">.</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:display</span><span class="p">)</span> <span class="c1"># 输出 Hello, World!</span>
</code></pre></div></div>

<p>再把字符串和 Symbol 替换掉：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">_</span><span class="p">){</span><span class="n">_</span><span class="p">[</span><span class="s2">""</span><span class="o">&lt;&lt;</span><span class="mi">72</span><span class="o">&lt;&lt;</span><span class="mi">101</span><span class="o">&lt;&lt;</span><span class="mi">108</span><span class="o">&lt;&lt;</span><span class="mi">108</span><span class="o">&lt;&lt;</span><span class="mi">111</span><span class="o">&lt;&lt;</span><span class="mi">44</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="o">&lt;&lt;</span><span class="mi">87</span><span class="o">&lt;&lt;</span><span class="mi">111</span><span class="o">&lt;&lt;</span><span class="mi">114</span><span class="o">&lt;&lt;</span><span class="mi">108</span><span class="o">&lt;&lt;</span><span class="mi">100</span><span class="o">&lt;&lt;</span><span class="mi">33</span><span class="o">&lt;&lt;</span><span class="mi">10</span><span class="p">]})</span>
  <span class="o">.</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:"</span><span class="si">#{</span><span class="s2">""</span><span class="o">&lt;&lt;</span><span class="mi">100</span><span class="o">&lt;&lt;</span><span class="mi">105</span><span class="o">&lt;&lt;</span><span class="mi">115</span><span class="o">&lt;&lt;</span><span class="mi">112</span><span class="o">&lt;&lt;</span><span class="mi">108</span><span class="o">&lt;&lt;</span><span class="mi">97</span><span class="o">&lt;&lt;</span><span class="mi">121</span><span class="si">}</span><span class="ss">"</span><span class="p">)</span>
</code></pre></div></div>

<p>我们就得到了<strong>没有字母的 Hello World 程序</strong>！</p>

<p>然而我们随即发现全局变量 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="vg">$&gt;</span></code> 相当于常量 <code class="language-ruby highlight language-ruby highlighter-rouge"><span class="no">STDOUT</span></code>。</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">STDOUT</span> <span class="o">&lt;&lt;</span> <span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span>
<span class="vg">$&gt;</span> <span class="o">&lt;&lt;</span> <span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span>
</code></pre></div></div>

<p>于是……</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vg">$&gt;</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="s2">""</span><span class="o">&lt;&lt;</span><span class="mi">72</span><span class="o">&lt;&lt;</span><span class="mi">101</span><span class="o">&lt;&lt;</span><span class="mi">108</span><span class="o">&lt;&lt;</span><span class="mi">108</span><span class="o">&lt;&lt;</span><span class="mi">111</span><span class="o">&lt;&lt;</span><span class="mi">44</span><span class="o">&lt;&lt;</span><span class="mi">32</span><span class="o">&lt;&lt;</span><span class="mi">87</span><span class="o">&lt;&lt;</span><span class="mi">111</span><span class="o">&lt;&lt;</span><span class="mi">114</span><span class="o">&lt;&lt;</span><span class="mi">108</span><span class="o">&lt;&lt;</span><span class="mi">100</span><span class="o">&lt;&lt;</span><span class="mi">33</span><span class="o">&lt;&lt;</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<p>根本不需要什么箭头函数。</p>

<h3 id="rbfxck">RBFxck</h3>

<p>于是我们打算提高难度：不能用数字。</p>

<p>如何用符号获得整数？可以用<strong>比较运算符</strong> <code class="language-plaintext highlighter-rouge">&lt;=&gt;</code>。数组 <code class="language-plaintext highlighter-rouge">[]</code> 等于 <code class="language-plaintext highlighter-rouge">[]</code>，<code class="language-plaintext highlighter-rouge">[[]]</code> 大于 <code class="language-plaintext highlighter-rouge">[]</code>。于是：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[]</span> <span class="o">&lt;=&gt;</span> <span class="p">[]</span> <span class="c1"># =&gt; 0</span>
<span class="p">[[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[]</span> <span class="c1"># =&gt; 1</span>
<span class="p">[]</span> <span class="o">&lt;=&gt;</span> <span class="p">[[]]</span> <span class="c1"># =&gt; -1</span>
</code></pre></div></div>

<p>用左移操作可以获得更多整数：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="o">&lt;&lt;</span> <span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span>                    <span class="c1"># 1 &lt;&lt; 1      =&gt; 2</span>
<span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="o">&lt;&lt;</span> <span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="o">|</span> <span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span>    <span class="c1"># 1 &lt;&lt; 1 | 1  =&gt; 3</span>
<span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="o">&lt;&lt;</span> <span class="p">(([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="o">&lt;&lt;</span> <span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[]))</span> <span class="c1"># 1 &lt;&lt; (1&lt;&lt;1) =&gt; 4</span>
</code></pre></div></div>

<p>不过后来我们发现利用<strong>一元负号</strong>和<strong>按位取反</strong>运算更方便：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">~</span><span class="mi">1</span>    <span class="c1"># =&gt; -2</span>
<span class="o">-~</span><span class="mi">1</span>   <span class="c1"># =&gt; 2</span>
<span class="o">~-~</span><span class="mi">1</span>  <span class="c1"># =&gt; -3</span>
<span class="o">-~-~</span><span class="mi">1</span> <span class="c1"># =&gt; 3</span>

<span class="o">-~</span><span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="c1"># =&gt; 2</span>
<span class="o">-~-~</span><span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="c1"># =&gt; 3</span>
<span class="o">-~-~-~</span><span class="p">([[]]</span> <span class="o">&lt;=&gt;</span> <span class="p">[])</span> <span class="c1"># =&gt; 4</span>
</code></pre></div></div>

<p>有了<a href="/blog/posts/201007_jvavscript#2022-12-04-更新写于-2022-11-13">上次</a>的经验，经过反复调整，我完成了这样一个整数/字符串编码程序：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">shortest</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
  <span class="n">a</span><span class="p">.</span><span class="nf">min_by</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:length</span><span class="p">)</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rbfuck_int</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
  <span class="k">return</span> <span class="s2">"([[]]&lt;=&gt;[])"</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span>
  <span class="k">return</span> <span class="s2">"([]&lt;=&gt;[[]])"</span> <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span>
  <span class="k">return</span> <span class="n">shortest</span><span class="p">(</span><span class="s2">"-</span><span class="si">#{</span><span class="n">rbfuck_int</span><span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sr">/^--/</span><span class="p">,</span> <span class="s2">""</span><span class="p">),</span> <span class="s2">"~</span><span class="si">#{</span><span class="n">rbfuck_int</span><span class="p">(</span><span class="o">~</span><span class="n">n</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sr">/^~~/</span><span class="p">,</span> <span class="s2">""</span><span class="p">))</span> <span class="k">if</span> <span class="n">n</span><span class="p">.</span><span class="nf">negative?</span>
  <span class="k">return</span> <span class="s2">"</span><span class="si">#{</span><span class="s2">"-~"</span> <span class="o">*</span> <span class="n">n</span><span class="si">}</span><span class="s2">([]&lt;=&gt;[])"</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">13</span>

  <span class="n">threshold</span> <span class="o">=</span> <span class="mi">8</span>
  <span class="n">bitl</span> <span class="o">=</span> <span class="n">threshold</span><span class="p">.</span><span class="nf">bit_length</span>
  <span class="k">if</span> <span class="n">n</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">bitl</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">threshold</span>
    <span class="n">bitl</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">while</span> <span class="n">n</span><span class="p">.</span><span class="nf">anybits?</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">bitl</span><span class="p">)</span>
    <span class="s2">"</span><span class="si">#{</span><span class="s2">"~-"</span> <span class="o">*</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="p">(</span><span class="o">~</span><span class="n">n</span><span class="p">)[</span><span class="mi">0</span><span class="p">,</span> <span class="n">bitl</span><span class="p">])</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">rbfuck_int</span><span class="p">((</span><span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">bitl</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s2">&lt;&lt;</span><span class="si">#{</span><span class="n">rbfuck_int</span><span class="p">(</span><span class="n">bitl</span><span class="p">)</span><span class="si">}</span><span class="s2">)"</span>
  <span class="k">else</span>
    <span class="n">bitl</span> <span class="o">+=</span> <span class="mi">1</span> <span class="k">until</span> <span class="n">n</span><span class="p">.</span><span class="nf">anybits?</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">bitl</span><span class="p">)</span>
    <span class="s2">"</span><span class="si">#{</span><span class="s2">"-~"</span> <span class="o">*</span> <span class="n">n</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">bitl</span><span class="p">]</span><span class="si">}</span><span class="s2">(</span><span class="si">#{</span><span class="n">rbfuck_int</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;&gt;</span> <span class="n">bitl</span><span class="p">)</span><span class="si">}</span><span class="s2">&lt;&lt;</span><span class="si">#{</span><span class="n">rbfuck_int</span><span class="p">(</span><span class="n">bitl</span><span class="p">)</span><span class="si">}</span><span class="s2">)"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="k">def</span> <span class="nf">rbfuck_str</span><span class="p">(</span><span class="n">str</span><span class="p">)</span>
  <span class="s1">'""'</span> <span class="o">+</span> <span class="n">str</span><span class="p">.</span><span class="nf">each_codepoint</span><span class="p">.</span><span class="nf">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">c</span><span class="o">|</span> <span class="s2">"&lt;&lt;</span><span class="si">#{</span><span class="n">rbfuck_int</span><span class="p">(</span><span class="n">c</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span> <span class="p">}.</span><span class="nf">join</span>
<span class="k">end</span>

<span class="n">code</span> <span class="o">=</span> <span class="s2">"$&gt;&lt;&lt;(</span><span class="si">#{</span><span class="n">rbfuck_str</span><span class="p">(</span><span class="s2">"Hello, World!</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span><span class="si">}</span><span class="s2">)"</span>
<span class="nb">puts</span> <span class="n">code</span>
<span class="nb">eval</span> <span class="n">code</span>
</code></pre></div></div>

<p>此程序便产生了本文开头的代码和输出。</p>

<h3 id="why"><em>why</em></h3>

<p><em>预防</em>也写了他自己的版本，记录如下。<del>我没太看懂</del></p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="vg">$_</span><span class="o">=</span><span class="p">{(:</span><span class="o">!</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{}}</span>
<span class="vg">$__</span><span class="o">=</span><span class="p">[[]]</span><span class="o">&lt;=&gt;</span><span class="p">[]</span>
<span class="vg">$_</span><span class="p">[:</span><span class="o">-</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="o">-&gt;</span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="n">__</span><span class="p">,</span><span class="o">*</span><span class="n">___</span><span class="p">,</span><span class="o">**</span><span class="n">____</span><span class="p">){(</span><span class="o">-&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">__</span><span class="p">){</span><span class="n">__</span><span class="o">.</span><span class="p">(</span><span class="n">_</span><span class="p">,</span><span class="o">*</span><span class="n">___</span><span class="p">,</span><span class="o">**</span><span class="n">____</span><span class="p">)})</span><span class="o">.</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:"</span><span class="si">#{</span><span class="n">__</span><span class="si">}</span><span class="ss">"</span><span class="p">)})</span>
<span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">]</span><span class="o">=-~</span><span class="p">((</span><span class="o">-~-~</span><span class="vg">$__</span><span class="p">)</span><span class="o">**-~</span><span class="vg">$__</span><span class="p">)</span>

<span class="vg">$&gt;</span><span class="o">&lt;&lt;</span><span class="p">(</span><span class="s2">""</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">~-~-</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">-~-~-~-~-~-~-~</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">-~-~-~-~-~-~-~</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">-~-~-~-~-~-~-~</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">-~</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-~-~-~-~-~-~-~-~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">~-~-~-</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-~-~-~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">~-~-~-~-</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-~-~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">-~</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">-~</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-~-~-~-~-~-~-~-~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">-~</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-~-~-~-~-~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">-~-~-~-~-~-~-~</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">~-~-~-~-</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-~-</span><span class="vg">$__</span><span class="o">&lt;&lt;</span>
  <span class="p">(</span><span class="o">~-~-~-~-</span><span class="vg">$_</span><span class="p">[</span><span class="ss">:%</span><span class="p">])</span><span class="o">**-~</span><span class="vg">$__</span> <span class="o">+</span> <span class="o">~-~-~-~-~-</span><span class="vg">$__</span>
<span class="p">)</span>
</code></pre></div></div>

<p>调试的过程中，我发现较旧版本的 Ruby 不支持对整数进行切片，遂写了如下 polyfill：</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Integer</span>
  <span class="vc">@@native_aref</span> <span class="o">=</span> <span class="no">Integer</span><span class="p">.</span><span class="nf">instance_method</span><span class="p">(</span><span class="ss">:[]</span><span class="p">)</span>
  <span class="vc">@@omit</span> <span class="o">=</span> <span class="no">BasicObject</span><span class="p">.</span><span class="nf">new</span>
  <span class="k">def</span> <span class="nf">[]</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">p2</span> <span class="o">=</span> <span class="vc">@@omit</span><span class="p">)</span>
    <span class="k">if</span> <span class="vc">@@omit</span><span class="p">.</span><span class="nf">equal?</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span>
      <span class="k">if</span> <span class="n">p1</span><span class="p">.</span><span class="nf">is_a?</span><span class="p">(</span><span class="no">Range</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">p1</span><span class="p">.</span><span class="nf">begin</span><span class="p">.</span><span class="nf">nil?</span>
          <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="nb">self</span><span class="p">.</span><span class="nf">nobits?</span><span class="p">(</span><span class="o">~</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span> <span class="o">&lt;&lt;</span> <span class="n">p1</span><span class="p">.</span><span class="nf">end</span><span class="p">))</span>
          <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">"The beginless range for Integer#[] results in infinity"</span>
        <span class="k">end</span>

        <span class="k">return</span> <span class="nb">self</span> <span class="o">&gt;&gt;</span> <span class="n">p1</span><span class="p">.</span><span class="nf">begin</span> <span class="k">if</span> <span class="n">p1</span><span class="p">.</span><span class="nf">end</span><span class="p">.</span><span class="nf">nil?</span> <span class="ow">or</span> <span class="n">p1</span><span class="p">.</span><span class="nf">end</span> <span class="o">&lt;</span> <span class="n">p1</span><span class="p">.</span><span class="nf">begin</span>
        <span class="k">return</span> <span class="nb">self</span><span class="p">[</span><span class="n">p1</span><span class="p">.</span><span class="nf">begin</span><span class="p">,</span> <span class="n">p1</span><span class="p">.</span><span class="nf">size</span><span class="p">]</span>
      <span class="k">end</span>

      <span class="k">return</span> <span class="vc">@@native_aref</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span>
    <span class="k">end</span>

    <span class="c1"># 为了在类型不对时报个错我容易吗（？</span>
    <span class="vc">@@native_aref</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">p1</span><span class="p">)</span> <span class="k">unless</span> <span class="n">p1</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:to_int</span><span class="p">)</span>
    <span class="vc">@@native_aref</span><span class="p">.</span><span class="nf">bind</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="p">(</span><span class="n">p2</span><span class="p">)</span> <span class="k">unless</span> <span class="n">p2</span><span class="p">.</span><span class="nf">respond_to?</span><span class="p">(</span><span class="ss">:to_int</span><span class="p">)</span>

    <span class="nb">self</span> <span class="o">&gt;&gt;</span> <span class="n">p1</span><span class="p">.</span><span class="nf">to_int</span> <span class="o">&amp;</span> <span class="o">~</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">p2</span><span class="p">.</span><span class="nf">to_int</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<p><em>fin</em></p>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="esolang" /><summary type="html"><![CDATA[“ruby，一款好用的 esolang” $&gt;&lt;&lt;(""&lt;&lt;~-~-~-~-~-~-~-~-(-~-~-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;-~-~-~-~-~(-~ -~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;~-~-~-~-(-~-~-~-~-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~( []&lt;=&gt;[]))&lt;&lt;~-~-~-~-(-~-~-~-~-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;~-(-~-~-~-~-~-~ -~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;~-~-~-~-(-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;( ([[]]&lt;=&gt;[])&lt;&lt;-~-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;-~-~-~-~-~-~-~(-~-~-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~( []&lt;=&gt;[]))&lt;&lt;~-(-~-~-~-~-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;-~-~(-~-~-~-~-~-~-~([ ]&lt;=&gt;[])&lt;&lt;-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;~-~-~-~-(-~-~-~-~-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~([]&lt;=&gt;[]) )&lt;&lt;-~-~-~-~(-~-~-~([]&lt;=&gt;[])&lt;&lt;-~-~-~-~-~([]&lt;=&gt;[]))&lt;&lt;-~(([[]]&lt;=&gt;[])&lt;&lt;-~-~-~-~-~([ ]&lt;=&gt;[]))&lt;&lt;-~-~-~-~-~-~-~-~-~-~([]&lt;=&gt;[])) Hello, World!]]></summary></entry><entry><title type="html">brainf 解释器，但它是一个 Python 表达式</title><link href="https://dgck81lnn.github.io/blog/posts/240406_wtf_brainf_interpreter" rel="alternate" type="text/html" title="brainf 解释器，但它是一个 Python 表达式" /><published>2024-04-06T01:33:41+08:00</published><updated>2024-04-06T01:33:41+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/wtf_brainf_interpreter</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/240406_wtf_brainf_interpreter"><![CDATA[<h1 id="brainf-解释器但它是一个-python-表达式">brainf 解释器，但它是一个 Python 表达式</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">lambda</span> <span class="n">cod</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">inp</span><span class="p">:</span> <span class="p">(</span><span class="k">lambda</span> <span class="o">*</span><span class="p">,</span> <span class="n">_cp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_mp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_ip</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_mem</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">_inp</span> <span class="o">=</span> <span class="n">inp</span>
<span class="p">.</span><span class="nf">encode</span><span class="p">(),</span> <span class="n">_out</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">""</span><span class="p">:</span> <span class="nf">next</span><span class="p">(</span><span class="nf">__import__</span><span class="p">(</span><span class="sh">"</span><span class="s">sys</span><span class="sh">"</span><span class="p">).</span><span class="n">stdout</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">_out</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">None</span>
<span class="ow">or</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">__import__</span><span class="p">(</span><span class="sh">"</span><span class="s">itertools</span><span class="sh">"</span><span class="p">).</span><span class="nf">count</span><span class="p">()</span> <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">_mem</span><span class="p">.</span><span class="nf">__setitem__</span><span class="p">(</span><span class="n">_mp</span><span class="p">,</span> <span class="p">(</span>
<span class="p">(</span><span class="n">_mem</span><span class="p">[</span><span class="n">_mp</span><span class="p">]</span> <span class="k">if</span> <span class="n">_mp</span> <span class="ow">in</span> <span class="n">_mem</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span>
<span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span> <span class="p">(</span><span class="n">_mp</span> <span class="p">:</span><span class="o">=</span> <span class="n">_mp</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span>
<span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">&lt;</span><span class="sh">"</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span> <span class="p">((</span><span class="n">_cp</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">si</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">_d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">:</span> <span class="nf">next</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span>
<span class="nf">range</span><span class="p">(</span><span class="n">si</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">cod</span><span class="p">))</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">si</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[</span><span class="sh">"</span> <span class="k">else</span> <span class="nf">range</span><span class="p">(</span><span class="n">si</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="sh">"</span><span class="s">[]</span><span class="sh">"</span>
<span class="ow">and</span> <span class="p">((</span><span class="n">_d</span> <span class="p">:</span><span class="o">=</span> <span class="n">_d</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[</span><span class="sh">"</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)))(</span><span class="n">_cp</span><span class="p">))</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="ow">in</span> <span class="sh">"</span><span class="s">[]</span><span class="sh">"</span>
<span class="ow">and</span> <span class="nf">bool</span><span class="p">(</span><span class="n">_mem</span><span class="p">[</span><span class="n">_mp</span><span class="p">]</span> <span class="k">if</span> <span class="n">_mp</span> <span class="ow">in</span> <span class="n">_mem</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="nf">bool</span><span class="p">(</span><span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span>
<span class="ow">or</span> <span class="p">((</span><span class="n">_out</span> <span class="p">:</span><span class="o">=</span> <span class="n">_out</span> <span class="o">+</span> <span class="nf">bytes</span><span class="p">((</span><span class="n">_mem</span><span class="p">[</span><span class="n">_mp</span><span class="p">],)))</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span> <span class="k">else</span> <span class="n">_mem</span><span class="p">.</span><span class="n">__setitem__</span>
<span class="p">(</span><span class="n">_mp</span><span class="p">,</span> <span class="n">_inp</span><span class="p">[</span><span class="n">_ip</span><span class="p">])</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span> <span class="p">(</span><span class="n">_ip</span> <span class="p">:</span><span class="o">=</span> <span class="n">_ip</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">_ip</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">_inp</span><span class="p">)</span>
<span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span> <span class="p">(</span><span class="n">_cp</span> <span class="p">:</span><span class="o">=</span> <span class="n">_cp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">cod</span><span class="p">))))())(</span><span class="o">*</span><span class="nf">__import__</span><span class="p">(</span><span class="sh">"</span><span class="s">sys</span><span class="sh">"</span><span class="p">).</span><span class="n">stdin</span><span class="p">.</span><span class="n">read</span>
<span class="p">().</span><span class="nf">partition</span><span class="p">(</span><span class="sh">"</span><span class="s">!</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>

<p><del>在群友的怂恿下</del>挑战用 Python 但不用 <code class="language-plaintext highlighter-rouge">def</code> 关键字和 <code class="language-python highlight language-python highlighter-rouge"><span class="nf">exec</span><span class="p">()</span></code>、<code class="language-python highlight language-python highlighter-rouge"><span class="nf">eval</span><span class="p">()</span></code> 函数实现 brainf 解释器，但我决定做得更绝一些。于是就有了这个单个表达式的 brainf 解释器。</p>

<p>此解释器从标准输入读取 brainf 代码和程序输入（用半角叹号分隔），程序输出直接发送到标准输出（在 Python IDLE 中可能无效）；将“<code class="language-python highlight language-python highlighter-rouge"><span class="nf">__import__</span><span class="p">(</span><span class="sh">"</span><span class="s">sys</span><span class="sh">"</span><span class="p">).</span><span class="n">stdout</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">_out</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">None</span> <span class="ow">or</span> <span class="bp">None</span></code>”改为“<code class="language-python highlight language-python highlighter-rouge"><span class="n">_out</span></code>”可变为以 <code class="language-python highlight language-python highlighter-rouge"><span class="nb">bytes</span></code> 类型返回输出内容。</p>

<p>大量使用了“<code class="language-python highlight language-python highlighter-rouge"><span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span></code>”来分隔“语句”，这相当于一些其他编程语言中的<em>逗号运算符</em>。使用赋值运算 <code class="language-python highlight language-python highlighter-rouge"><span class="p">:</span><span class="o">=</span></code> 和字典的 <code class="language-python highlight language-python highlighter-rouge"><span class="nf">__setitem__</span><span class="p">()</span></code> 方法来进行赋值。循环结构全部用生成器表达式（Generator expressions）实现：使用了 <code class="language-python highlight language-python highlighter-rouge"><span class="p">...</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">itertools</span><span class="p">.</span><span class="nf">count</span><span class="p">()</span></code> 来实现无限循环，并使用 <code class="language-python highlight language-python highlighter-rouge"><span class="nf">next</span><span class="p">(...</span> <span class="k">for</span> <span class="p">...</span> <span class="k">if</span> <span class="p">...)</span></code> 的写法来在满足特定条件时跳出循环。</p>

<p>带缩进版：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">lambda</span> <span class="n">cod</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">inp</span><span class="p">:</span>
  <span class="p">(</span><span class="k">lambda</span> <span class="o">*</span><span class="p">,</span> <span class="n">_cp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_mp</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_ip</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">_mem</span> <span class="o">=</span> <span class="p">{},</span> <span class="n">_inp</span> <span class="o">=</span> <span class="n">inp</span> <span class="p">.</span><span class="nf">encode</span><span class="p">(),</span> <span class="n">_out</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">""</span><span class="p">:</span> <span class="nf">next</span><span class="p">(</span>
    <span class="nf">__import__</span><span class="p">(</span><span class="sh">"</span><span class="s">sys</span><span class="sh">"</span><span class="p">).</span><span class="n">stdout</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">_out</span><span class="p">)</span> <span class="ow">and</span> <span class="bp">None</span> <span class="ow">or</span> <span class="bp">None</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">__import__</span><span class="p">(</span><span class="sh">"</span><span class="s">itertools</span><span class="sh">"</span><span class="p">).</span><span class="nf">count</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span>
      <span class="n">_mem</span><span class="p">.</span><span class="nf">__setitem__</span><span class="p">(</span>
        <span class="n">_mp</span><span class="p">,</span>
        <span class="p">((</span><span class="n">_mem</span><span class="p">[</span><span class="n">_mp</span><span class="p">]</span> <span class="k">if</span> <span class="n">_mp</span> <span class="ow">in</span> <span class="n">_mem</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">+</span><span class="sh">"</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mi">255</span>
      <span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span>
      <span class="p">(</span><span class="n">_mp</span> <span class="p">:</span><span class="o">=</span> <span class="n">_mp</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">&gt;</span><span class="sh">"</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span> <span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">&lt;</span><span class="sh">"</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span>
      <span class="p">(</span>
        <span class="p">(</span><span class="n">_cp</span> <span class="p">:</span><span class="o">=</span> <span class="p">(</span><span class="k">lambda</span> <span class="n">si</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">_d</span> <span class="o">=</span> <span class="mi">0</span><span class="p">:</span>
          <span class="nf">next</span><span class="p">(</span><span class="n">i</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">si</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">cod</span><span class="p">))</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">si</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[</span><span class="sh">"</span> <span class="k">else</span> <span class="nf">range</span><span class="p">(</span><span class="n">si</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span>
            <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="sh">"</span><span class="s">[]</span><span class="sh">"</span> <span class="ow">and</span> <span class="p">((</span><span class="n">_d</span> <span class="p">:</span><span class="o">=</span> <span class="n">_d</span> <span class="o">+</span> <span class="p">(</span><span class="mi">1</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">[</span><span class="sh">"</span> <span class="k">else</span> <span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
          <span class="p">)</span>
        <span class="p">)(</span><span class="n">_cp</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="ow">in</span> <span class="sh">"</span><span class="s">[]</span><span class="sh">"</span> <span class="ow">and</span> <span class="nf">bool</span><span class="p">(</span><span class="n">_mem</span><span class="p">[</span><span class="n">_mp</span><span class="p">]</span> <span class="k">if</span> <span class="n">_mp</span> <span class="ow">in</span> <span class="n">_mem</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span> <span class="o">==</span> <span class="nf">bool</span><span class="p">(</span><span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span> <span class="mi">0</span>
      <span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span>
      <span class="p">(</span>
        <span class="p">(</span><span class="n">_out</span> <span class="p">:</span><span class="o">=</span> <span class="n">_out</span> <span class="o">+</span> <span class="nf">bytes</span><span class="p">((</span><span class="n">_mem</span><span class="p">[</span><span class="n">_mp</span><span class="p">],)))</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span>
        <span class="k">else</span> <span class="n">_mem</span><span class="p">.</span><span class="nf">__setitem__</span><span class="p">(</span><span class="n">_mp</span><span class="p">,</span> <span class="n">_inp</span><span class="p">[</span><span class="n">_ip</span><span class="p">])</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span> <span class="p">(</span><span class="n">_ip</span> <span class="p">:</span><span class="o">=</span> <span class="n">_ip</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">cod</span><span class="p">[</span><span class="n">_cp</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">_ip</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">_inp</span><span class="p">)</span>
        <span class="k">else</span> <span class="mi">0</span>
      <span class="p">)</span> <span class="ow">and</span> <span class="mi">0</span> <span class="ow">or</span>
      <span class="p">(</span><span class="n">_cp</span> <span class="p">:</span><span class="o">=</span> <span class="n">_cp</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">cod</span><span class="p">)</span>
    <span class="p">)</span>
  <span class="p">))()</span>
<span class="p">)(</span><span class="o">*</span><span class="nf">__import__</span><span class="p">(</span><span class="sh">"</span><span class="s">sys</span><span class="sh">"</span><span class="p">).</span><span class="n">stdin</span><span class="p">.</span><span class="nf">read </span><span class="p">().</span><span class="nf">partition</span><span class="p">(</span><span class="sh">"</span><span class="s">!</span><span class="sh">"</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="esolang" /><summary type="html"><![CDATA[brainf 解释器，但它是一个 Python 表达式 (lambda cod, _, inp: (lambda *, _cp = 0, _mp = 0, _ip = 0, _mem = {}, _inp = inp .encode(), _out = b"": next(__import__("sys").stdout.buffer.write(_out) and None or None for _ in __import__("itertools").count() if not (_mem.__setitem__(_mp, ( (_mem[_mp] if _mp in _mem else 0) + (1 if cod[_cp] == "+" else -1 if cod[_cp] == "-" else 0)) &amp; 255) and 0 or (_mp := _mp + (1 if cod[_cp] == "&gt;" else -1 if cod[ _cp] == "&lt;" else 0)) and 0 or ((_cp := (lambda si, *, _d = 0: next(i for i in ( range(si, len(cod)) if cod[si] == "[" else range(si, -1, -1)) if cod[i] in "[]" and ((_d := _d + (1 if cod[i] == "[" else -1)) == 0)))(_cp)) if cod[_cp] in "[]" and bool(_mem[_mp] if _mp in _mem else 0) == bool(cod[_cp] == "]") else 0) and 0 or ((_out := _out + bytes((_mem[_mp],))) if cod[_cp] == "." else _mem.__setitem__ (_mp, _inp[_ip]) and 0 or (_ip := _ip + 1) if cod[_cp] == "," and _ip &lt; len(_inp) else 0) and 0 or (_cp := _cp + 1) &lt; len(cod))))())(*__import__("sys").stdin.read ().partition("!"))]]></summary></entry><entry><title type="html">Windows 10 或 11 电脑运行原神时卡死闪退问题通过更新显卡驱动解决后复发的解决办法</title><link href="https://dgck81lnn.github.io/blog/posts/230826_gi_graphics_driver" rel="alternate" type="text/html" title="Windows 10 或 11 电脑运行原神时卡死闪退问题通过更新显卡驱动解决后复发的解决办法" /><published>2023-08-26T16:56:00+08:00</published><updated>2023-09-02T15:41:00+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/gi_graphics_driver</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/230826_gi_graphics_driver"><![CDATA[<h1 id="windows-10-或-11-电脑运行原神时卡死闪退问题通过更新显卡驱动解决后复发的解决办法">Windows 10 或 11 电脑运行原神时卡死闪退问题通过更新显卡驱动解决后复发的解决办法</h1>

<p>近日原神 4.0 版本更新发布，水国枫丹实装，同时提高了运行游戏的电脑配置要求。我在使用装有 Windows 11 系统和英特尔锐炬® Xe 集成显卡（核显）的笔记本电脑运行新版本的游戏时，和很多玩家一样遇到了游戏卡死崩溃的问题。</p>

<p>问题具体表现为：角色移动到特定区域时，游戏画面先卡住（或登录游戏时卡在七元素进度条的界面），输入和声音可能在一段时间后恢复，但画面仍然不动，再过一段时间后游戏崩溃闪退；也出现过游戏过程中电脑完全卡住，只能强制关机的情况。</p>

<p>对此，原神官方发布了一篇文章（<a href="https://www.bilibili.com/read/cv25812764"><em>Intel® Iris® Xe 显卡及其它显卡设备崩溃、卡死问题处理办法</em></a>），其中给出了更新显卡驱动的详细方法，<strong>本文不再赘述</strong>。</p>

<p>然而，没过几天，我发现崩溃闪退的问题再次出现，遂重新安装驱动，再次成功修复了问题。问题第三次出现后，我意识到操作系统自带的 <strong>Windows Update</strong> 功能在我使用电脑的过程中<strong>自动重新安装了驱动程序</strong>。</p>

<p><img src="/blog/assets/2023-08-26-wu.png" alt="我电脑的 Windows 更新历史记录中显示最近更新了 Intel 显卡驱动。" /></p>

<p>考虑到我有能力在需要的情况下自行安装驱动更新，我选择<strong>禁用 Windows Update 自动更新驱动的功能</strong>。通过网络搜索，不难得知，禁用 Windows Update 驱动自动更新主要有三种方法：修改设置、编辑组策略以及通过编辑注册表。说起来，为了降低修复无效的可能性，包括我在内的多数人都会同时采取多种方法修复，因此很难说哪个是最有效的方法。其中，在修改设置最为简单，而组策略编辑器在家庭版的系统中默认隐藏，需要通过其他手段启用，可能较为麻烦。</p>

<p>更改设置的具体步骤为：在“控制面版”（或全局搜索）中搜索“<em>设备安装设置</em>”，进入“<strong>更改设备安装设置</strong>”。选择“否”并保存即可。</p>

<p><img src="/blog/assets/2023-08-26-dis.png" alt="在“设备安装设置”中选择“否（你的设备可能无法正常工作）”。" /></p>

<p>其他方法本文不再赘述，可以参考此知乎问答：<a href="https://www.zhihu.com/question/60040927">如何关闭 Windows 10 的驱动程序自动更新？</a></p>

<p>另外，可以通过设备管理器配合组策略编辑器来禁用某一特定硬件的驱动自动更新，方法详见：<a href="https://zhuanlan.zhihu.com/p/432751320">Windows 10 硬件驱动自动安装和强制更新之痛</a></p>

<p>2023-09-02 更新：在重新安装驱动前，可在设备管理器中找到显卡的属性，并点击“驱动程序”标签内的“<strong>回退驱动程序</strong>”，系统会询问回退驱动的原因，例如“<strong>上一版本的驱动程序似乎更可靠</strong>”。这样或许会对防止驱动程序自动更新有帮助。</p>]]></content><author><name>DGCK81LNN</name></author><category term="游戏" /><category term="原神" /><summary type="html"><![CDATA[Windows 10 或 11 电脑运行原神时卡死闪退问题通过更新显卡驱动解决后复发的解决办法 近日原神 4.0 版本更新发布，水国枫丹实装，同时提高了运行游戏的电脑配置要求。我在使用装有 Windows 11 系统和英特尔锐炬® Xe 集成显卡（核显）的笔记本电脑运行新版本的游戏时，和很多玩家一样遇到了游戏卡死崩溃的问题。]]></summary></entry><entry><title type="html">JavaScript，但是你可以用 new int[len] 来创建类型化数组</title><link href="https://dgck81lnn.github.io/blog/posts/230426_js_new_int_arr" rel="alternate" type="text/html" title="JavaScript，但是你可以用 new int[len] 来创建类型化数组" /><published>2023-04-26T18:55:00+08:00</published><updated>2023-04-26T18:55:00+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/js_new_int_arr</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/230426_js_new_int_arr"><![CDATA[<h1 id="javascript但是你可以用-new-intlen-来创建类型化数组">JavaScript，但是你可以用 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="k">new</span> <span class="nx">int</span><span class="p">[</span><span class="nx">len</span><span class="p">]</span></code> 来创建类型化数组</h1>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">*</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</code></pre></div></div>

<p>🤔…</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">int</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span> <span class="c1">// ==&gt; Int32Array(20)</span>
</code></pre></div></div>

<hr />

<p>今天跟 FCC 同学讨论时提到，JavaScript 中调用构造函数时如果不需要传入任何参数，则可以不写调用函数的括号：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Map</span>
</code></pre></div></div>

<p>我立刻想到，只要利用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Javascript/Reference/Global_Objects/Proxy"><code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nb">Proxy</span></code></a><sup><a href="https://developer.mozilla.org/en-US/docs/Web/Javascript/Reference/Global_Objects/Proxy">(en)</a></sup>，就可以创建一个名为 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">int</span></code> 的对象，使得 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">int</span><span class="p">[</span><span class="nx">len</span><span class="p">]</span></code> 返回一个可以被当作构造函数调用的函数，调用后返回一个指定长度的 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nb">Int32Array</span></code>，从而实现用 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="k">new</span> <span class="nx">int</span><span class="p">[</span><span class="nx">len</span><span class="p">]</span></code> 的语法来创建类型化数组。（C++ 化 JS！）于是当场写了这个。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nf">get</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">prop</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nc">Int32Array</span><span class="p">(</span><span class="nx">prop</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="kd">const</span> <span class="nx">int</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Proxy</span><span class="p">({},</span> <span class="nx">handler</span><span class="p">)</span>

<span class="k">new</span> <span class="nx">int</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span> <span class="c1">// =&gt; Int32Array(32)</span>
</code></pre></div></div>

<p>显然这里的 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">int</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span></code> 只是在对 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">int</span></code> 进行索引，这样会调用 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">handler</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nx">int</span><span class="p">,</span> <span class="dl">"</span><span class="s2">32</span><span class="dl">"</span><span class="p">)</span></code>。此时我们就返回一个函数来创建对应长度的类型化数组。然后把 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">int</span><span class="p">[</span><span class="mi">32</span><span class="p">]</span></code> 的结果当作构造函数来调用，就能得到这个新数组。</p>

<p>又写了一个能创建其他各种数组的版本。<code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">Class</span></code> 只要是一个接受数组长度的构造函数就可以。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">ArrayCreator</span><span class="p">(</span><span class="nx">Class</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">new</span> <span class="nc">Proxy</span><span class="p">({},</span> <span class="p">{</span>
    <span class="nf">get</span><span class="p">(</span><span class="nx">_</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">length</span> <span class="o">=</span> <span class="o">+</span><span class="nx">length</span>
      <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nb">Number</span><span class="p">.</span><span class="nf">isSafeInteger</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span> <span class="o">||</span> <span class="nx">length</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nc">TypeError</span><span class="p">(</span><span class="s2">`ArrayCreator(</span><span class="p">${</span><span class="nx">Class</span><span class="p">.</span><span class="nx">name</span><span class="p">}</span><span class="s2">): length must be a non-negative safe integer`</span><span class="p">)</span>
      <span class="k">return</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">Class</span><span class="p">(</span><span class="nx">length</span><span class="p">)</span>
      <span class="p">}</span>
    <span class="p">},</span>
  <span class="p">})</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">int</span> <span class="o">=</span> <span class="nc">ArrayCreator</span><span class="p">(</span><span class="nb">Int32Array</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">long</span> <span class="o">=</span> <span class="nc">ArrayCreator</span><span class="p">(</span><span class="nx">BigInt64Array</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">short</span> <span class="o">=</span> <span class="nc">ArrayCreator</span><span class="p">(</span><span class="nb">Int16Array</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">float</span> <span class="o">=</span> <span class="nc">ArrayCreator</span><span class="p">(</span><span class="nb">Float32Array</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">double</span> <span class="o">=</span> <span class="nc">ArrayCreator</span><span class="p">(</span><span class="nb">Float64Array</span><span class="p">)</span>

<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">int</span><span class="p">[</span><span class="mi">20</span><span class="p">])</span> <span class="c1">// =&gt; Int32Array[20]</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">long</span><span class="p">[</span><span class="mi">20</span><span class="p">])</span> <span class="c1">// =&gt; BigInt64Array(20)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">short</span><span class="p">[</span><span class="mi">20</span><span class="p">])</span> <span class="c1">// =&gt; Int16Array[20]</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">float</span><span class="p">[</span><span class="mi">20</span><span class="p">])</span> <span class="c1">// =&gt; Float32Array[20]</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">double</span><span class="p">[</span><span class="mi">20</span><span class="p">])</span> <span class="c1">// =&gt; Float64Array[20]</span>

<span class="kd">const</span> <span class="nx">any</span> <span class="o">=</span> <span class="nc">ArrayCreator</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span> <span class="c1">// (?)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="k">new</span> <span class="nx">any</span><span class="p">[</span><span class="mi">20</span><span class="p">])</span> <span class="c1">// =&gt; Array(20)</span>
</code></pre></div></div>

<p>没了。（</p>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="日常写代码" /><summary type="html"><![CDATA[JavaScript，但是你可以用 new int[len] 来创建类型化数组 int* arr = new int[20]; 🤔… const array = new int[20] console.log(array) // ==&gt; Int32Array(20)]]></summary></entry><entry><title type="html">Javascript 版的原义字符串？</title><link href="https://dgck81lnn.github.io/blog/posts/221008_js_verbatim_string" rel="alternate" type="text/html" title="Javascript 版的原义字符串？" /><published>2022-10-08T10:03:44+08:00</published><updated>2023-04-26T19:28:00+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/js_verbatim_string</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/221008_js_verbatim_string"><![CDATA[<h1 id="javascript-版的原义字符串">Javascript 版的原义字符串？</h1>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">let</span> <span class="nx">s</span> <span class="o">=</span> <span class="nx">cts</span><span class="s2">`Hello, ``world``!`</span><span class="p">()</span> <span class="c1">// "Hello, `world`!"</span>
</code></pre></div></div>

<hr />

<p>几天前我发现在 Javascript <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals#带标签的模板字符串">带标签的模板字符串</a><sup><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#tagged_templates">(英文)</a></sup>语法中，标签完全可以由任何表达式充当，包括模板字符串本身。事情是这样的。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">`aaa``bbb`</span>
</code></pre></div></div>

<p>当我运行上面这个表达式时，得到的报错信息是</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TypeError: "aaa" is not a function
</code></pre></div></div>

<p>第一个模板字符串 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`aaa`</span></code> 被当作了第二个模板字符串 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`bbb`</span></code> 的标签，但因为它不是一个函数，所以得到了“不是函数”的错误。这意味着，即使这样</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">```js
console.log("等等……我们这是在 Markdown 里吗？")
```</span>
</code></pre></div></div>

<p>也是符合 Javascript 语法的，看起来就像是模板字符串里面可以包含双反引号，就像 C# 中的原义字符串一样……只是会报运行时错误罢了。</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">string</span> <span class="n">s</span> <span class="p">=</span> <span class="s">@"\反斜杠\不用转义，双引号转义成""两个双引号"""</span><span class="p">;</span>
<span class="kt">string</span> <span class="n">s2</span> <span class="p">=</span> <span class="s">@"""quoted"""</span><span class="p">;</span>
</code></pre></div></div>

<p>想到 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nb">String</span><span class="p">.</span><span class="nx">raw</span></code> 标签的字符串里面没有办法包含反引号（除非前面有奇数个反斜杠），我们或许可以让反引号可以转义成两个反引号。</p>

<p>要想让 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`aaa``bbb`</span></code> 返回 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="dl">"</span><span class="s2">aaa`bbb</span><span class="dl">"</span></code>，第一步是让它不要报错。这简单，只要在前面加个标签函数，让 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">tag</span><span class="s2">`aaa`</span></code> 返回一个标签函数就好了。</p>

<p>不过，因为字符串里面的反引号数量是不确定的，所以后面的 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`bbb`</span></code> 还得继续返回一个标签函数，万一后面还有个 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`ccc`</span></code> 呢。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">tag</span><span class="s2">`aaa``bbb``ccc``ddd`</span> <span class="c1">// "aaa`bbb`ccc`ddd"</span>
<span class="c1">// 拆开来看就是……</span>
<span class="kd">var</span> <span class="nx">tag2</span> <span class="o">=</span> <span class="nx">tag</span><span class="s2">`aaa`</span>
<span class="kd">var</span> <span class="nx">tag3</span> <span class="o">=</span> <span class="nx">tag2</span><span class="s2">`bbb`</span>
<span class="kd">var</span> <span class="nx">tag4</span> <span class="o">=</span> <span class="nx">tag3</span><span class="s2">`ccc`</span>
<span class="kd">var</span> <span class="nx">val</span> <span class="o">=</span> <span class="nx">tag4</span><span class="s2">`ddd`</span>
</code></pre></div></div>

<p>这里 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">val</span></code> 仍然得是一个标签函数 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">tag5</span></code>，因为 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">tag4</span></code> 被调用的时候完全不会知道 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`ddd`</span></code> 之后还会不会有 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`eee`</span></code>。因为这是一个可以无限延续的“模板字符<em>串</em>串”，我们暂且给最前面的标签起名叫“<span lang="en">Continuable Template Strings</span>”——<code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">cts</span></code>。</p>

<p>由于整个<em>串</em>串最后的返回值是个函数，我们需要一种方法来取得我们要的字符串。可以给它添加一个 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">value</span></code> 成员，重写 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nf">valueOf</span><span class="p">()</span></code> 和/或 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nf">toString</span><span class="p">()</span></code> 方法……或者干脆让这个函数在没有参数传入时直接返回字符串。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cts</span><span class="s2">`aaa``bbb`</span><span class="p">.</span><span class="nx">value</span>
<span class="nx">cts</span><span class="s2">`aaa``bbb`</span><span class="p">.</span><span class="nf">valueOf</span><span class="p">()</span>
<span class="nx">cts</span><span class="s2">`aaa``bbb`</span><span class="p">.</span><span class="nf">toString</span><span class="p">()</span>
<span class="nx">cts</span><span class="s2">`aaa``bbb`</span> <span class="o">+</span> <span class="dl">""</span> <span class="c1">// 隐式调用 .valueOf() 转换成字符串</span>
<span class="nx">cts</span><span class="s2">`aaa``bbb`</span> <span class="o">+</span> <span class="p">[]</span> <span class="c1">// 同上...?</span>
<span class="nx">cts</span><span class="s2">`aaa``bbb`</span><span class="p">()</span> <span class="c1">// 还是这个最简短！</span>
</code></pre></div></div>

<p>到这里思路就完整了，可以开始写代码了。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">cts</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">str</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nf">raw</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="c1">// 就假装咱们是直接拿 String.raw 当标签</span>
  <span class="kd">const</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">str</span>

    <span class="nx">str</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">`</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nf">raw</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">tag</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">tag</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里还有个更精致些的版本。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">cts</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">tag</span> <span class="o">=</span> <span class="kd">function</span> <span class="nf">tag</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span> <span class="nx">tag</span><span class="p">.</span><span class="nx">value</span>

    <span class="nx">tag</span><span class="p">.</span><span class="nx">value</span> <span class="o">+=</span> <span class="dl">"</span><span class="s2">`</span><span class="dl">"</span> <span class="o">+</span> <span class="nb">String</span><span class="p">.</span><span class="nf">raw</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
    <span class="k">return</span> <span class="nx">tag</span>
  <span class="p">}</span>
  <span class="nb">Object</span><span class="p">.</span><span class="nf">defineProperties</span><span class="p">(</span><span class="nx">tag</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">value</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">writable</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">value</span><span class="p">:</span> <span class="nb">String</span><span class="p">.</span><span class="nf">raw</span><span class="p">(...</span><span class="nx">args</span><span class="p">),</span>
    <span class="p">},</span>
    <span class="na">toString</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">value</span><span class="p">:</span> <span class="nf">function </span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">value</span>
      <span class="p">},</span>
    <span class="p">},</span>
  <span class="p">})</span>
  <span class="k">return</span> <span class="nx">tag</span>
<span class="p">}</span>
</code></pre></div></div>

<p>（说来我还是写这个的时候才知道，在带名称的函数字面量里面可以通过名称来引用函数自身。相当于 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span></code>。以前一直不知道这里加名称有什么用。）</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">a</span> <span class="o">=</span> <span class="kd">function</span> <span class="nf">f</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">f</span> <span class="p">}</span>
<span class="nf">a</span><span class="p">()</span> <span class="c1">// a</span>

<span class="c1">// 当然，对函数声明无效</span>
<span class="kd">function</span> <span class="nf">g</span><span class="p">()</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">g</span> <span class="p">}</span>
<span class="kd">const</span> <span class="nx">h</span> <span class="o">=</span> <span class="nx">g</span>
<span class="nx">g</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span>
<span class="nf">h</span><span class="p">()</span> <span class="c1">// "foo"</span>
</code></pre></div></div>

<p>话说回来，刚才我们实现了“加强版 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nb">String</span><span class="p">.</span><span class="nx">raw</span></code>”，虽然现在可以包含反引号了，但仍然没办法写出以单个反斜杠结尾的字符串，因为反引号仍然会被反斜杠“假装转义掉”，字符串不会至此就结束。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cts</span><span class="s2">`aaa</span><span class="se">\`</span><span class="s2">`</span><span class="p">()</span> <span class="c1">// "aaa\\`"</span>
</code></pre></div></div>

<p>看来 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nb">String</span><span class="p">.</span><span class="nx">raw</span></code> 的古怪特性被原封不动地遗传了下来：由于斜杠也会被斜杠“假装转义掉”，只有紧跟在<em>奇数个</em>斜杠后面的反引号不需要双写……</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cts</span><span class="s2">`
1 个斜杠 </span><span class="se">\`</span><span class="s2">
2 个斜杠 </span><span class="se">\\</span><span class="s2">``
3 个斜杠 </span><span class="se">\\\`</span><span class="s2">
4 个斜杠 </span><span class="se">\\\\</span><span class="s2">``
5 个斜杠 </span><span class="se">\\\\\`</span><span class="s2">
`</span><span class="p">()</span>
</code></pre></div></div>

<p>（看起来目前版本的 Rouge 语法高亮不认识模板字符串里的“<code class="language-plaintext highlighter-rouge">\\</code>”，我得去发个 issue〔或者 PR〕。）</p>

<aside class="card my-3 w-75 mx-auto">
<div class="card-header">2022-12-10 更新</div>
<div class="card-body pb-0">
    <p><a href="https://github.com/rouge-ruby/rouge/pull/1878">我提交的 PR</a> 已经被合并了。</p>
  </div>
</aside>

<p>插值还是可以用的，并且也会被奇数个斜杠“假装转义掉”：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">cts</span><span class="s2">`</span><span class="p">${</span><span class="mi">111</span><span class="p">}</span><span class="s2">`</span><span class="p">()</span> <span class="c1">// "111"</span>
<span class="nx">cts</span><span class="s2">`</span><span class="se">\$</span><span class="s2">{111}`</span><span class="p">()</span> <span class="c1">// "\\${111}"</span>
<span class="nx">cts</span><span class="s2">`</span><span class="se">\\</span><span class="p">${</span><span class="mi">111</span><span class="p">}</span><span class="s2">`</span><span class="p">()</span> <span class="c1">// "\\\\111"</span>
</code></pre></div></div>

<p>如果前面不是奇数个斜杠的话，只能用插值来“转义”了。“<code class="language-plaintext highlighter-rouge">${</code>”或许需要转义成……<code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`</span><span class="p">${</span><span class="dl">"</span><span class="s2">${</span><span class="dl">"</span><span class="p">}</span><span class="s2">`</span></code>？<code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`</span><span class="p">${</span><span class="dl">"</span><span class="s2">$</span><span class="dl">"</span><span class="p">}</span><span class="s2">{`</span></code>？<code class="language-javascript highlight language-javascript highlighter-rouge"><span class="s2">`$</span><span class="p">${</span><span class="dl">""</span><span class="p">}</span><span class="s2">{`</span></code>？（这真的还算是转义吗？）</p>

<p>这些怪癖都是原义字符串和转义字符串的语法重合导致的，但凡像 C# 那样在语法上作一点区分（原义字符串前加“<code class="language-plaintext highlighter-rouge">@</code>”）也不至于变成现在的样子。</p>

<p>看来这个东西用处不大，咱们还是不拿它当原义字符串用了吧。看看有没有其他用法。</p>

<p>我记得在 C 语言里，两个字符串字面量之间只有空白的话，是会被合并作一个字符串处理的。不像 Javascript 这样需要用加号处理。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">dna</span> <span class="o">=</span>
    <span class="s">"#include &lt;stdio.h&gt;</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"const char* dna =</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"    禁止套娃！;</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"int main() {</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"    // TODO: code a quine</span><span class="se">\n</span><span class="s">"</span>
    <span class="s">"}"</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// TODO: code a quine</span>
<span class="p">}</span>
</code></pre></div></div>

<p>用刚才的思路，要想在 Javascript 里实现这种效果也很简单，只要把 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="dl">"</span><span class="s2">`</span><span class="dl">"</span> <span class="o">+</span></code> 去掉就行了。</p>

<p>不过，我刚才这段 C 代码的字符串里还有 <code class="language-plaintext highlighter-rouge">\n</code>。我们刚刚获取的可是原义字符串。要想获得“非原义”字符串，完全可以自己把传给标签函数的参数拼起来，比如我写的这个很难看懂的版本：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">identity</span><span class="p">(</span><span class="nx">parts</span><span class="p">,</span> <span class="p">...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if </span><span class="p">(</span><span class="nx">parts</span><span class="p">.</span><span class="nf">includes</span><span class="p">(</span><span class="kc">undefined</span><span class="p">))</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nc">SyntaxError</span><span class="p">(</span><span class="dl">"</span><span class="s2">Syntax error in template literal</span><span class="dl">"</span><span class="p">)</span>
  <span class="k">return</span> <span class="nx">values</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">prev</span><span class="p">,</span> <span class="nx">curr</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">prev</span> <span class="o">+</span> <span class="nx">curr</span> <span class="o">+</span> <span class="nx">parts</span><span class="p">[</span><span class="nx">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="nx">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="p">}</span>
</code></pre></div></div>

<p>不过 MDN 上的做法，是直接把“非原义”字符串放在本来是原义字符串的位置上丢给 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nb">String</span><span class="p">.</span><span class="nx">raw</span></code> 来处理。简单粗暴。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">identity</span><span class="p">(</span><span class="nx">parts</span><span class="p">,</span> <span class="p">...</span><span class="nx">values</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nb">String</span><span class="p">.</span><span class="nf">raw</span><span class="p">({</span> <span class="na">raw</span><span class="p">:</span> <span class="nx">parts</span> <span class="p">},</span> <span class="p">...</span><span class="nx">values</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>或许我们还可以让 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nf">cts</span><span class="p">()</span></code> 在第一个参数不是数组的时候把参数视为每两段模板字符串中间要插入的字符（<code class="language-plaintext highlighter-rouge">`</code> 或空字符串）和用来处理模板字符串的标签函数（<code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nb">String</span><span class="p">.</span><span class="nx">raw</span></code> 或 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">identity</span></code>），返回一个新的标签函数。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">cts</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">joiner</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">`</span><span class="dl">"</span>
  <span class="kd">let</span> <span class="nx">underlyingTag</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">raw</span>
  <span class="kd">const</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">parts</span><span class="p">,</span> <span class="p">...</span><span class="nx">interp</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">raw</span> <span class="o">=</span> <span class="nx">parts</span><span class="p">.</span><span class="nx">raw</span>
      <span class="nx">parts</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">parts</span><span class="p">]</span>
      <span class="nx">parts</span><span class="p">.</span><span class="nx">raw</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">raw</span><span class="p">]</span>
    <span class="p">}</span>
    <span class="nx">interp</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">interp</span><span class="p">]</span>
    <span class="kd">const</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nf">function </span><span class="p">(</span><span class="nx">newParts</span><span class="p">,</span> <span class="p">...</span><span class="nx">newInterp</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="o">!</span><span class="nx">newParts</span><span class="p">)</span> <span class="k">return</span> <span class="nf">underlyingTag</span><span class="p">(</span><span class="nx">parts</span><span class="p">,</span> <span class="p">...</span><span class="nx">interp</span><span class="p">)</span>

      <span class="nx">parts</span><span class="p">[</span><span class="nx">parts</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">joiner</span> <span class="o">+</span> <span class="nx">newParts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
      <span class="nx">parts</span><span class="p">.</span><span class="nf">push</span><span class="p">(...</span><span class="nx">newParts</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
      <span class="nx">parts</span><span class="p">.</span><span class="nx">raw</span><span class="p">[</span><span class="nx">parts</span><span class="p">.</span><span class="nx">raw</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">joiner</span> <span class="o">+</span> <span class="nx">newParts</span><span class="p">.</span><span class="nx">raw</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
      <span class="nx">parts</span><span class="p">.</span><span class="nx">raw</span><span class="p">.</span><span class="nf">push</span><span class="p">(...</span><span class="nx">newParts</span><span class="p">.</span><span class="nx">raw</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
      <span class="nx">interp</span><span class="p">.</span><span class="nf">push</span><span class="p">(...</span><span class="nx">newInterp</span><span class="p">)</span>
      <span class="k">return</span> <span class="nx">tag</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">tag</span>
  <span class="p">}</span>

  <span class="k">if </span><span class="p">(</span><span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span> <span class="k">return</span> <span class="nf">tag</span><span class="p">(...</span><span class="nx">args</span><span class="p">)</span>
  <span class="nx">joiner</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">??</span> <span class="nx">joiner</span>
  <span class="nx">underlyingTag</span> <span class="o">=</span> <span class="nx">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">??</span> <span class="nx">underlyingTag</span>
  <span class="k">return</span> <span class="nx">tag</span>
<span class="p">}</span>

<span class="nx">cts</span><span class="s2">`Hello, ``world``!`</span><span class="p">()</span>     <span class="c1">// "Hello, `world`!"</span>
<span class="nf">cts</span><span class="p">()</span><span class="s2">`Hello, ``world``!`</span><span class="p">()</span>   <span class="c1">// "Hello, `world`!"（同上）</span>
<span class="nf">cts</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span><span class="s2">`Hello, ``world``!`</span><span class="p">()</span> <span class="c1">// "Hello, world!"</span>
<span class="nf">cts</span><span class="p">(</span><span class="dl">"</span><span class="s2">111</span><span class="dl">"</span><span class="p">,</span> <span class="nx">identity</span><span class="p">)</span><span class="s2">`Hello, </span><span class="se">\\</span><span class="s2">``world</span><span class="se">\\</span><span class="s2">``!`</span><span class="p">()</span> <span class="c1">// "Hello, \\111world\\111!"</span>

<span class="nf">cts</span><span class="p">(</span><span class="dl">""</span><span class="p">)</span><span class="s2">`ABCDEFGHIJKLMNOPQRSTUVWXYZ`</span>
       <span class="s2">`abcdefghijklmnopqrstuvwxyz`</span>
       <span class="s2">`0123456789+/=`</span><span class="p">()</span>

<span class="nf">cts</span><span class="p">(</span><span class="dl">"</span><span class="se">\n</span><span class="dl">"</span><span class="p">)</span>
<span class="s2">`pipi suno li kama jo e ilo suno.`</span>
<span class="s2">`tenpo pimeja la, ona li tawa sama waso.`</span>
<span class="s2">`ona li wile mute lukin e jan olin,`</span>
<span class="s2">`li alasa e olin.`</span><span class="p">()</span> <span class="c1">// 甚至把 \n 都省去了。</span>
</code></pre></div></div>

<p>最后两个例子看起来似乎还不错，可以写出漂亮的多行字符串，并且可以随便缩进。不过 <a href="https://prettier.io/playground/#N4Igxg9gdgLgprEAucMDOAKAOiLWo4CU+ABgA4CWlABGgK5QTUA2F1A1gIYC2n1AVkzjUKzJvUYA6EqXhQyTStzj8+zTgBpq0NWxicA7nzQ8+RtBGmkdLNgdHDudeCzrsKUasNWeIrKBoyUCSs1JzqJl7a-tIYhCAaIBBkMBTQaMignABO2RAGAAo5CBko4UYAnhmJAEbZnGDscDAAyjxwADIecMgAZuFocLX1jc0tZA0eAObIMNl0QyBw3DVwACZr6x2cUFN0nFNwAGIQ2bwwqbvIIJzOEAkgABYw3MwA6o8U8GgTYHAtJS+FAAbl8KtcwGhqiAPINsjACvUprw+gNFvw0AAPFrTZhwACKdAg8FRzEGiQm2Th1xqnFWzAeZGyHhgbwoaxgj2QAA4AAwUvKDN71MjXJlwOHAnqJACORPgiOSpRuaAAtFA4Ot1g9snA5RRdYiDiikP0yYtBtwKKTySA0LiCfKeqa0Yl9DU2RyuUgAExu+qiaYAYQg3BNSzQAFYHnRBgAVOmlM224ELACSUE2sBaYGZKQAgpmWjAKnibXAAL4VoA" title="Prettier playground">Prettier 似乎不太喜欢我的这种写法</a>。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">cts</span><span class="p">(</span>
  <span class="dl">"</span><span class="se">\n</span><span class="dl">"</span>
<span class="p">)</span><span class="s2">`pipi suno li kama jo e ilo suno.``tenpo pimeja la, ona li tawa sama waso.``ona li wile mute lukin e jan olin,``li alasa e olin.`</span><span class="p">()</span>
<span class="c1">// :(</span>
</code></pre></div></div>

<p>没用，散了吧。</p>

<p>我的评价是，不如老老实实用反斜杠转义。</p>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="日常写代码" /><summary type="html"><![CDATA[Javascript 版的原义字符串？ let s = cts`Hello, ``world``!`() // "Hello, `world`!" 几天前我发现在 Javascript 带标签的模板字符串(英文)语法中，标签完全可以由任何表达式充当，包括模板字符串本身。事情是这样的。]]></summary></entry><entry><title type="html">文言标准输入语法糖《閱文秘術》使用例</title><link href="https://dgck81lnn.github.io/blog/posts/220906_wenyan_stdin_examples" rel="alternate" type="text/html" title="文言标准输入语法糖《閱文秘術》使用例" /><published>2022-09-06T23:19:00+08:00</published><updated>2024-02-27T20:49:00+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/wenyan_stdin_examples</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/220906_wenyan_stdin_examples"><![CDATA[<h1 id="文言标准输入语法糖閱文秘術使用例">文言标准输入语法糖《閱文秘術》使用例</h1>

<blockquote>
  <p>前情提要：<a href="/blog/posts/220118_wenyan_stdin">“文言”编程语言能读取标准输入了 | LNN的博客！</a></p>
</blockquote>

<p>去年底（2021-12）我给<a href="https://wy-lang.org/">文言</a>写了个读取标准输入的库，名之曰“<a href="https://github.com/DGCK81LNN/wenyan-stdin">閱文秘術</a>”，发布在“<a href="https://wyg.wy-lang.org/">文淵閣</a>”。有了这个库就可以用文言愉快地 <code class="language-plaintext highlighter-rouge">scanf</code> 了，再也不需要 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="kd">夫</span><span class="p">「</span><span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">fs</span><span class="dl">'</span><span class="p">).</span><span class="nf">readFileSync</span><span class="p">(</span><span class="dl">"</span><span class="s2">/dev/stdin</span><span class="dl">"</span><span class="p">).</span><span class="nf">toString</span><span class="p">().</span><span class="nf">trim</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sr">/</span><span class="se">\s</span><span class="sr">+/g</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">)」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">輸入</span><span class="p">」</span></code> 了。这里通过几道非常简单的题目演示一下“閱文秘術”的实际使用。我们使用文言的编译器将代码编译成 JavaScript 后在<a href="https://www.luogu.com.cn/">洛谷</a>按 Node.js 提交。</p>

<h2 id="p1181-数列分段-section-i"><a href="https://www.luogu.com.cn/problem/P1181">P1181 数列分段 Section I</a></h2>

<blockquote>
  <h5 id="题目描述">题目描述</h5>

  <p>对于给定的一个长度为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 的正整数数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，现要将其分成<strong>连续</strong>的若干段，并且每段和不超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>（可以等于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>），问最少能将其分成多少段使得满足要求。</p>

  <h5 id="输入格式">输入格式</h5>

  <p>第1行包含两个正整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo separator="true">,</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">N,M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span></span></span></span>，表示了数列 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 的长度与每段和的最大值，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 行包含 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 个空格隔开的非负整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>A</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">A_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，如题目所述。</p>

  <h5 id="输出格式">输出格式</h5>

  <p>一个正整数，输出最少划分的段数。</p>

  <h5 id="样例输入">样例输入</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5 6
4 2 4 5 1
</code></pre></div>  </div>

  <h5 id="样例输出">样例输出</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3
</code></pre></div>  </div>

  <h5 id="样例解释">样例解释</h5>

  <p>将数列如下划分：</p>

  <span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">[</mo><mn>4</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>24</mn><mo stretchy="false">]</mo><mo stretchy="false">[</mo><mn>51</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[4][2 4][5 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">4</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">24</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord">51</span><span class="mclose">]</span></span></span></span></span>

  <p>第一段和为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">4</span></span></span></span>，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span> 段和为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 段和为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span> 均满足和不超过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">M=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>，并可以证明 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span> 是最少划分的段数。</p>
</blockquote>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">吾嘗觀</span><span class="s">『閱文秘術』</span><span class="k">之書</span><span class="p">。</span><span class="k">方悟</span><span class="p">「</span><span class="nv">閱數</span><span class="p">」</span><span class="k">之義</span><span class="p">。</span><span class="w">

</span>閱<span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">列長</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">限</span><span class="p">」。</span><span class="w">
</span><span class="kd">吾有</span><span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">曰</span><span class="m">零</span><span class="kd">曰</span><span class="m">一</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">段值</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">段數</span><span class="p">」。</span><span class="w">

</span><span class="k">為是</span><span class="p">「</span><span class="nv">列長</span><span class="p">」</span><span class="k">遍</span><span class="p">。</span><span class="w">
  </span>閱<span class="m">一</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">數</span><span class="p">」。</span><span class="w">
  </span><span class="ow">加</span><span class="p">「</span><span class="nv">數</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">段值</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">和</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">和</span><span class="p">」</span><span class="ow">大於</span><span class="p">「</span><span class="nv">限</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="w">
    </span><span class="ow">加</span><span class="m">一</span><span class="ow">於</span><span class="p">「</span><span class="nv">段數</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">段數</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">段值</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">數</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">若非</span><span class="p">。</span><span class="w">
    </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">段值</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">和</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">云云</span><span class="p">。</span><span class="w">
</span><span class="k">云云</span><span class="p">。</span><span class="w">

</span><span class="kd">夫</span><span class="p">「</span><span class="nv">段數</span><span class="p">」。</span><span class="ow">書之</span><span class="p">。</span><span class="w">
</span></code></pre></div></div>

<p><a href="https://www.luogu.com.cn/record/71509026">本程序评测记录</a></p>

<h2 id="p2240-深基12例1部分背包问题"><a href="https://www.luogu.com.cn/problem/P2240">P2240 【深基12.例1】部分背包问题</a></h2>

<blockquote>
  <h5 id="题目描述-1">题目描述</h5>

  <p>阿里巴巴走进了装满宝藏的藏宝洞。藏宝洞里面有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo stretchy="false">(</mo><mi>N</mi><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">N(N \le 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">100</span><span class="mclose">)</span></span></span></span> 堆金币，第 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 堆金币的总重量和总价值分别是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy="false">(</mo><mn>1</mn><mo>≤</mo><msub><mi>m</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub><mo>≤</mo><mn>100</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">m_i,v_i(1\le m_i,v_i \le 100)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8304em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">100</span><span class="mclose">)</span></span></span></span>。阿里巴巴有一个承重量为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo stretchy="false">(</mo><mi>T</mi><mo>≤</mo><mn>1000</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">T(T \le 1000)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1000</span><span class="mclose">)</span></span></span></span> 的背包，但并不一定有办法将全部的金币都装进去。他想装走尽可能多价值的金币。所有金币都可以随意分割，分割完的金币重量价值比（也就是单位价格）不变。请问阿里巴巴最多可以拿走多少价值的金币？</p>

  <h5 id="输入格式-1">输入格式</h5>

  <p>第一行两个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi><mo separator="true">,</mo><mi>T</mi></mrow><annotation encoding="application/x-tex">N,T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span></span></span></span>。</p>

  <p>接下来 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>N</mi></mrow><annotation encoding="application/x-tex">N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span></span> 行，每行两个整数 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mi>i</mi></msub><mo separator="true">,</mo><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">m_i,v_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>。</p>

  <h5 id="输出格式-1">输出格式</h5>

  <p>一个实数表示答案，输出两位小数</p>

  <h5 id="样例输入-1">样例输入</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4 50
10 60
20 100
30 120
15 45
</code></pre></div>  </div>

  <h5 id="样例输出-1">样例输出</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>240.00
</code></pre></div>  </div>
</blockquote>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">吾嘗觀</span><span class="s">『閱文秘術』</span><span class="k">之書</span><span class="p">。</span><span class="k">方悟</span><span class="p">「</span><span class="nv">閱數</span><span class="p">」</span><span class="k">之義</span><span class="p">。</span><span class="w">

</span>閱<span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">堆數</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">容</span><span class="p">」。</span><span class="w">
</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">列</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">堆列</span><span class="p">」。</span><span class="w">
</span><span class="k">為是</span><span class="p">「</span><span class="nv">堆數</span><span class="p">」</span><span class="k">遍</span><span class="p">。</span><span class="w">
  </span>閱<span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">重</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">值</span><span class="p">」。</span><span class="w">
  </span><span class="ow">除</span><span class="p">「</span><span class="nv">值</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">重</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">比</span><span class="p">」。</span><span class="w">
  </span><span class="kd">吾有</span><span class="m">一</span><span class="kt">物</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">堆</span><span class="p">」。</span><span class="kd">其物如是</span><span class="p">。</span><span class="w">
    </span><span class="kd">物之</span><span class="s">『重』</span><span class="kp">者</span><span class="p">。</span><span class="kt">數</span><span class="kd">曰</span><span class="p">「</span><span class="nv">重</span><span class="p">」。</span><span class="w">
    </span><span class="kd">物之</span><span class="s">『值』</span><span class="kp">者</span><span class="p">。</span><span class="kt">數</span><span class="kd">曰</span><span class="p">「</span><span class="nv">值</span><span class="p">」。</span><span class="w">
    </span><span class="kd">物之</span><span class="s">『比』</span><span class="kp">者</span><span class="p">。</span><span class="kt">數</span><span class="kd">曰</span><span class="p">「</span><span class="nv">比</span><span class="p">」。</span><span class="w">
  </span><span class="kd">是謂</span><span class="p">「</span><span class="nv">堆</span><span class="p">」</span><span class="kd">之物也</span><span class="p">。</span><span class="w">
  </span><span class="ow">充</span><span class="p">「</span><span class="nv">堆列</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">堆</span><span class="p">」。</span><span class="w">
</span><span class="k">云云</span><span class="p">。</span><span class="w">

</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">總值</span><span class="p">」。</span><span class="w">
</span><span class="k">恆為是</span><span class="p">。</span><span class="w">
  </span><span class="kd">吾有</span><span class="m">三</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">戊</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">號</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">良比</span><span class="p">」。</span><span class="w">
  </span><span class="k">為是</span><span class="p">「</span><span class="nv">堆數</span><span class="p">」</span><span class="k">遍</span><span class="p">。</span><span class="w">
    </span><span class="ow">加</span><span class="m">一</span><span class="ow">於</span><span class="p">「</span><span class="nv">戊</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">戊</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="kd">夫</span><span class="p">「</span><span class="nv">堆列</span><span class="p">」</span><span class="ow">之</span><span class="p">「</span><span class="nv">戊</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">堆</span><span class="p">」。</span><span class="w">
    </span><span class="kd">夫</span><span class="p">「</span><span class="nv">堆</span><span class="p">」。</span><span class="k">若其不然者</span><span class="p">。</span><span class="k">乃止是遍也</span><span class="p">。</span><span class="w">
    </span><span class="k">若</span><span class="p">「</span><span class="nv">堆</span><span class="p">」</span><span class="ow">之</span><span class="s">『比』</span><span class="ow">大於</span><span class="p">「</span><span class="nv">良比</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="w">
      </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">號</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">戊</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
      </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">良比</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">堆</span><span class="p">」</span><span class="ow">之</span><span class="s">『比』</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="k">云云</span><span class="p">。</span><span class="w">
  </span><span class="k">云云</span><span class="p">。</span><span class="w">

  </span><span class="k">若</span><span class="p">「</span><span class="nv">號</span><span class="p">」</span><span class="ow">等於</span><span class="m">零</span><span class="kp">者</span><span class="p">。</span><span class="k">乃止也</span><span class="p">。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">堆列</span><span class="p">」</span><span class="ow">之</span><span class="p">「</span><span class="nv">號</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">堆</span><span class="p">」。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">堆</span><span class="p">」</span><span class="ow">之</span><span class="s">『重』</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">重</span><span class="p">」。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">堆</span><span class="p">」</span><span class="ow">之</span><span class="s">『值』</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">值</span><span class="p">」。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">堆</span><span class="p">」</span><span class="ow">之</span><span class="s">『比』</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">比</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">容</span><span class="p">」</span><span class="ow">大於</span><span class="p">「</span><span class="nv">重</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="w">
    </span><span class="ow">減</span><span class="p">「</span><span class="nv">容</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">重</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">容</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="ow">加</span><span class="p">「</span><span class="nv">總值</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">值</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">總值</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">堆列</span><span class="p">」</span><span class="ow">之</span><span class="p">「</span><span class="nv">號</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今不復存矣</span><span class="p">。</span><span class="w">
  </span><span class="k">若非</span><span class="p">。</span><span class="w">
    </span><span class="ow">乘</span><span class="p">「</span><span class="nv">容</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">比</span><span class="p">」。</span><span class="ow">加</span><span class="p">「</span><span class="nv">總值</span><span class="p">」</span><span class="ow">以</span><span class="kc">其</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">總值</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="k">乃止也</span><span class="p">。</span><span class="w">
</span><span class="k">云云</span><span class="p">。</span><span class="w">

</span><span class="kd">夫</span><span class="p">「</span><span class="nv">總值</span><span class="p">」。</span><span class="ow">施</span><span class="p">「(</span><span class="nx">n</span><span class="o">=&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nf">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">))」</span><span class="ow">於</span><span class="kc">其</span><span class="p">。</span><span class="ow">書之</span><span class="p">。</span><span class="w">
</span></code></pre></div></div>

<p>贪心。把每一堆的重量、价值以及性价比存储在结构体（<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="kt">物</span></code>）的数组（<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="kt">列</span></code>）里，然后反复遍历数组找出性价比最高的一堆，并从数组中删除（<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="kd">今不復存矣</span></code>），直到背包装满或全部装下为止。</p>

<p><a href="https://www.luogu.com.cn/record/71506371">本程序评测记录</a></p>

<h2 id="p1603-斯诺登的密码"><a href="https://www.luogu.com.cn/problem/P1603">P1603 斯诺登的密码</a></h2>

<blockquote>
  <h5 id="题目描述-2">题目描述</h5>

  <p>…………</p>

  <p>……纸条由纯英文构成：<code class="language-plaintext highlighter-rouge">Obama is a two five zero .</code>（以 <code class="language-plaintext highlighter-rouge">.</code> 结束输出，只有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span> 个单词+一个句号，句子开头如没有大写亦为合法）。……破译密码的步骤如下：</p>

  <ol>
    <li>
      <p>找出句子中所有用英文表示的数字 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mo>≤</mo><mn>20</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(\leq 20)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">20</span><span class="mclose">)</span></span></span></span>，列举在下：</p>

      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>one two three four five six seven eight nine ten eleven twelve
thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty
a both another first second third
</code></pre></div>      </div>

      <p>（<code class="language-plaintext highlighter-rouge">another</code> 算作 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span>）</p>
    </li>
    <li>
      <p>将这些数字平方后对 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn></mrow><annotation encoding="application/x-tex">100</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">100</span></span></span></span> 取模，如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>00</mn><mo separator="true">,</mo><mn>05</mn><mo separator="true">,</mo><mn>11</mn><mo separator="true">,</mo><mn>19</mn><mo separator="true">,</mo><mn>86</mn><mo separator="true">,</mo><mn>99</mn></mrow><annotation encoding="application/x-tex">00,05,11,19,86,99</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">00</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">05</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">11</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">19</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">86</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">99</span></span></span></span>。</p>
    </li>
    <li>
      <p>把这些两位数按数位排成一行，组成一个新数，如果开头为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>，就去 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>。</p>
    </li>
    <li>
      <p>找出所有排列方法中最小的一个数，即为密码。</p>
    </li>
  </ol>

  <h5 id="输入格式-2">输入格式</h5>

  <p>一个含有 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span> 个单词的句子。</p>

  <h5 id="输出格式-2">输出格式</h5>

  <p>一个整型变量（密码）。如果没有符合要求的数字出现，则输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn></mrow><annotation encoding="application/x-tex">0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span>。</p>

  <h5 id="样例输入-2">样例输入</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Black Obama is two five zero .
</code></pre></div>  </div>

  <h5 id="样例输出-2">样例输出</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>425
</code></pre></div>  </div>
</blockquote>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">吾嘗觀</span><span class="s">『閱文秘術』</span><span class="k">之書</span><span class="p">。</span><span class="k">方悟</span><span class="p">「</span><span class="nv">閱言</span><span class="p">」</span><span class="k">之義</span><span class="p">。</span><span class="w">
</span><span class="k">吾嘗觀</span><span class="s">『列經』</span><span class="k">之書</span><span class="p">。</span><span class="k">方悟</span><span class="p">「</span><span class="nv">排序</span><span class="p">」</span><span class="k">之義</span><span class="p">。</span><span class="w">

</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">比較</span><span class="p">」。</span><span class="kd">欲行是術</span><span class="p">。</span><span class="k">必先得</span><span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">曰</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="kd">乃行是術曰</span><span class="p">。</span><span class="w">
  </span><span class="ow">減</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="k">乃得矣</span><span class="p">。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">比較</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">

</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">識數</span><span class="p">」。</span><span class="kd">欲行是術</span><span class="p">。</span><span class="k">必先得</span><span class="m">一</span><span class="kt">言</span><span class="p">。</span><span class="kd">曰</span><span class="p">「</span><span class="nv">詞</span><span class="p">」。</span><span class="kd">乃行是術曰</span><span class="p">。</span><span class="w">
  </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nx">詞</span><span class="p">.</span><span class="nf">toLowerCase</span><span class="p">()」</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『one』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">一</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『two』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">二</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『three』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">三</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『four』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">四</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『five』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">五</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『six』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">六</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『seven』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">七</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『eight』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">八</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『nine』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">九</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『ten』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『eleven』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十一</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『twelve』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十二</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『thirteen』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十三</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『fourteen』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十四</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『fifteen』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十五</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『sixteen』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十六</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『seventeen』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十七</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『eighteen』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十八</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『nineteen』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">十九</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『twenty』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">二十</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『a』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">一</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『both』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">二</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『another』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">一</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『first』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">一</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『second』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">二</span><span class="k">也</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『third』</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="m">三</span><span class="k">也</span><span class="p">。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">識數</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">

</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">列</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">數列</span><span class="p">」。</span><span class="w">
</span><span class="k">恆為是</span><span class="p">。</span><span class="w">
  </span>閱<span class="m">一</span><span class="kt">言</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">詞</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">詞</span><span class="p">」</span><span class="ow">等於</span><span class="s">『.』</span><span class="kp">者</span><span class="k">乃止也</span><span class="p">。</span><span class="w">
  </span><span class="ow">施</span><span class="p">「</span><span class="nf">識數</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">詞</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">數</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">數</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="ow">乘</span><span class="p">「</span><span class="nv">數</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">數</span><span class="p">」。</span><span class="ow">除</span><span class="kc">其</span><span class="ow">以</span><span class="m">百</span><span class="p">。</span><span class="ow">所餘幾何</span><span class="p">。</span><span class="ow">充</span><span class="p">「</span><span class="nv">數列</span><span class="p">」</span><span class="ow">以</span><span class="kc">其</span><span class="k">也</span><span class="p">。</span><span class="w">
</span><span class="k">云云</span><span class="p">。</span><span class="w">

</span><span class="ow">施</span><span class="p">「</span><span class="nf">排序</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">比較</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">數列</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">數列</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
</span><span class="kd">夫</span><span class="m">零</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">秘數</span><span class="p">」。</span><span class="w">
</span><span class="k">凡</span><span class="p">「</span><span class="nv">數列</span><span class="p">」</span><span class="ow">中之</span><span class="p">「</span><span class="nv">數</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="w">
	</span><span class="ow">乘</span><span class="p">「</span><span class="nv">秘數</span><span class="p">」</span><span class="ow">以</span><span class="m">百</span><span class="p">。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="p">「</span><span class="nv">數</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">秘數</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
</span><span class="k">云云</span><span class="p">。</span><span class="w">

</span><span class="kd">夫</span><span class="p">「</span><span class="nv">秘數</span><span class="p">」。</span><span class="ow">書之</span><span class="p">。</span><span class="w">
</span></code></pre></div></div>

<p><a href="https://www.luogu.com.cn/record/86028261">本程序评测记录</a></p>

<h2 id="p1957-口算练习题"><a href="https://www.luogu.com.cn/problem/P1957">P1957 口算练习题</a></h2>

<blockquote>
  <h5 id="题目描述-3">题目描述</h5>

  <p>……王老师收集了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 道学生经常做错的口算题，并且想整理编写成一份练习。……王老师希望尽量减少输入的工作量，比如 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="monospace">5+8</mtext></mrow><annotation encoding="application/x-tex">\texttt{5+8}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6111em;"></span><span class="mord text"><span class="mord texttt">5+8</span></span></span></span></span> 的算式最好只要输入 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="monospace">5</mtext></mrow><annotation encoding="application/x-tex">\texttt 5</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6111em;"></span><span class="mord text"><span class="mord texttt">5</span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="monospace">8</mtext></mrow><annotation encoding="application/x-tex">\texttt 8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6111em;"></span><span class="mord text"><span class="mord texttt">8</span></span></span></span></span>，输出的结果要尽量详细以方便后期排版的使用，比如对于上述输入进行处理后输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="monospace">5+8=13</mtext></mrow><annotation encoding="application/x-tex">\texttt{5+8=13}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6111em;"></span><span class="mord text"><span class="mord texttt">5+8=13</span></span></span></span></span> 以及该算式的总长度 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>6</mn></mrow><annotation encoding="application/x-tex">6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">6</span></span></span></span>。王老师把这个光荣的任务交给你，请你帮他编程实现以上功能。</p>

  <h5 id="输入格式-3">输入格式</h5>

  <p>第一行为数值 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span></p>

  <p>接着的 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 行为需要输入的算式，每行可能有三个数据或两个数据。</p>

  <p>若该行为三个数据则第一个数据表示运算类型，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="monospace">a</mtext></mrow><annotation encoding="application/x-tex">\texttt a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord text"><span class="mord texttt">a</span></span></span></span></span> 表示加法运算，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="monospace">b</mtext></mrow><annotation encoding="application/x-tex">\texttt b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6111em;"></span><span class="mord text"><span class="mord texttt">b</span></span></span></span></span> 表示减法运算，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="monospace">c</mtext></mrow><annotation encoding="application/x-tex">\texttt c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord text"><span class="mord texttt">c</span></span></span></span></span> 表示乘法运算，接着的两个数据表示参加运算的运算数。</p>

  <p>若该行为两个数据，则表示本题的运算类型与上一题的运算类型相同，而这两个数据为运算数。</p>

  <h5 id="输出格式-3">输出格式</h5>

  <p>输出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>2</mn><mo>×</mo><mi>i</mi></mrow><annotation encoding="application/x-tex">2\times i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6595em;"></span><span class="mord mathnormal">i</span></span></span></span> 行。对于每个输入的算式，输出完整的运算式及结果，第二行输出该运算式的总长度</p>

  <h5 id="样例输入-3">样例输入</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4
a 64 46
275 125
c 11 99
b 46 64
</code></pre></div>  </div>

  <h5 id="样例输出-1">样例输出 #1</h5>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>64+46=110
9
275+125=400
11
11*99=1089
10
46-64=-18
9
</code></pre></div>  </div>
</blockquote>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">吾嘗觀</span><span class="s">『閱文秘術』</span><span class="k">之書</span><span class="p">。</span><span class="k">方悟</span><span class="p">「</span><span class="nv">閱數</span><span class="p">」「</span><span class="nv">閱白</span><span class="p">」「</span><span class="nv">閱字</span><span class="p">」</span><span class="k">之義</span><span class="p">。</span><span class="w">

</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">言</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">類</span><span class="p">」。</span><span class="w">
</span>閱<span class="m">一</span><span class="kt">數</span><span class="p">。</span><span class="k">為是</span><span class="kc">其</span><span class="k">遍</span><span class="p">。</span><span class="w">
	</span>閱<span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="w">
	</span><span class="k">若</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="ow">等於</span><span class="p">「</span><span class="nv">undefined</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="w">
		</span>閱<span class="m">一</span>白<span class="p">。</span><span class="kd">噫</span><span class="p">。</span><span class="w">
		</span>閱<span class="m">一</span>字<span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">類</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
		</span>閱<span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">乙</span><span class="p">」</span><span class="k">也</span><span class="p">。</span><span class="w">

	</span><span class="k">若</span><span class="p">「</span><span class="nv">類</span><span class="p">」</span><span class="ow">等於</span><span class="s">『a』</span><span class="kp">者</span><span class="p">。</span><span class="w">
		</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">言</span><span class="kd">曰</span><span class="s">『+』</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">算符</span><span class="p">」。</span><span class="w">
		</span><span class="ow">加</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">得數</span><span class="p">」。</span><span class="w">
	</span><span class="k">或若</span><span class="p">「</span><span class="nv">類</span><span class="p">」</span><span class="ow">等於</span><span class="s">『b』</span><span class="kp">者</span><span class="p">。</span><span class="w">
		</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">言</span><span class="kd">曰</span><span class="s">『-』</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">算符</span><span class="p">」。</span><span class="w">
		</span><span class="ow">減</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">得數</span><span class="p">」。</span><span class="w">
	</span><span class="k">或若</span><span class="p">「</span><span class="nv">類</span><span class="p">」</span><span class="ow">等於</span><span class="s">『c』</span><span class="kp">者</span><span class="p">。</span><span class="w">
		</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">言</span><span class="kd">曰</span><span class="s">『*』</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">算符</span><span class="p">」。</span><span class="w">
		</span><span class="ow">乘</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">得數</span><span class="p">」</span><span class="k">也</span><span class="p">。</span><span class="w">

	</span><span class="ow">加</span><span class="s">『』</span><span class="ow">以</span><span class="p">「</span><span class="nv">甲</span><span class="p">」。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="p">「</span><span class="nv">算符</span><span class="p">」。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="s">『=』</span><span class="p">。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="p">「</span><span class="nv">得數</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">等式</span><span class="p">」。</span><span class="w">
	</span><span class="kd">夫</span><span class="p">「</span><span class="nv">等式</span><span class="p">」。</span><span class="ow">書之</span><span class="p">。</span><span class="kd">夫</span><span class="p">「</span><span class="nv">等式</span><span class="p">」</span><span class="ow">之長</span><span class="p">。</span><span class="ow">書之</span><span class="p">。</span><span class="w">
</span><span class="k">云云</span><span class="p">。</span><span class="w">
</span></code></pre></div></div>

<p>字符串。读入的时候每行先尝试直接读取两个数字。如果返回了 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="kc">undefined</span></code>，说明这一行有字母。先用 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge">閱<span class="m">一</span>白<span class="p">。</span><span class="kd">噫</span></code> 跳过换行符，然后再 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge">閱<span class="m">一</span>字</code> 把字母读进来，相当于 C 语言的</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="n">chr</span><span class="p">;</span>
<span class="n">scanf</span><span class="p">(</span><span class="s">" %c"</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">chr</span><span class="p">);</span>
</code></pre></div></div>

<p>不过代码里直接写 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="kc">undefined</span></code> 确实不太美观，可以这样获得一个 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="kc">undefined</span></code>：</p>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">吾有</span><span class="m">一</span><span class="kt">元</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">空無</span><span class="p">」。</span><span class="w">
</span></code></pre></div></div>

<p>这会编译成：</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">空無</span> <span class="o">=</span> <span class="k">void</span> <span class="mi">0</span>
</code></pre></div></div>

<p>输出时直接把等式做成字符串，再用 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="kd">夫</span><span class="p">「</span><span class="nv">等式</span><span class="p">」</span><span class="ow">之長</span></code> 获得长度。</p>

<p><a href="https://www.luogu.com.cn/record/86058073">本程序评测记录</a></p>

<div class="card mt-3 mx-sm-auto col-sm-9 col-md-6">
  <div class="card-header">2024-02-27</div>
  <div class="card-body">
    <p class="card-text">因本站先前无法显示 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>LaTeX</mtext></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8988em;vertical-align:-0.2155em;"></span><span class="mord text"><span class="mord textrm">L</span><span class="mspace" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6833em;"><span style="top:-2.905em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord"><span class="mord textrm mtight sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mspace" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mspace" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.4678em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"><span></span></span></span></span><span class="mspace" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span> 公式，本文最初发布于我的洛谷博客。由于洛谷博客迁移至洛谷专栏后显示效果不佳，现在此重新发布。<s class="text-body-secondary" style="text-decoration-color: var(--bs-body-color)">尽情享受文言 lang 语法高亮吧！</s></p>
  </div>
</div>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="esolang" /><summary type="html"><![CDATA[文言标准输入语法糖《閱文秘術》使用例 前情提要：“文言”编程语言能读取标准输入了 | LNN的博客！ 去年底（2021-12）我给文言写了个读取标准输入的库，名之曰“閱文秘術”，发布在“文淵閣”。有了这个库就可以用文言愉快地 scanf 了，再也不需要 夫「require('fs').readFileSync("/dev/stdin").toString().trim().split(/\s+/g).map(parseInt)」。名之曰「輸入」 了。这里通过几道非常简单的题目演示一下“閱文秘術”的实际使用。我们使用文言的编译器将代码编译成 JavaScript 后在洛谷按 Node.js 提交。]]></summary></entry><entry><title type="html">“文言”编程语言能读取标准输入了</title><link href="https://dgck81lnn.github.io/blog/posts/220118_wenyan_stdin" rel="alternate" type="text/html" title="“文言”编程语言能读取标准输入了" /><published>2022-01-18T17:04:31+08:00</published><updated>2023-05-31T21:16:21+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/wenyan_stdin</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/220118_wenyan_stdin"><![CDATA[<h1 id="文言编程语言能读取标准输入了">“文言”编程语言能读取标准输入了</h1>

<p>前不久我给<a href="https://wy-lang.org/">“文言”</a>写了个扩展库，让它能够通过 Node.js 读取标准输入。现已被收入“文言”的包管理系统<a href="https://wyg.wy-lang.org/">“文淵閣”</a>。</p>

<p>研究过这门深奥编程语言的朋友可能知道，“文言”中没有原生的办法来读取标准输入。我猜测这大概也是<a href="https://www.luogu.com.cn/">洛谷网</a>不再支持这门语言的原因之一。</p>

<aside class="card my-3 p-3 pb-0">
 <figure>
  <blockquote>
   <p><b lang="en">Esoteric programming language</b>，简称<span>Esolang</span>，它们的设计被用于测试计算机语言设计的极限，作为一个概念的证明，或仅仅是一个玩笑。<span lang="en">Esolang</span>创作者［……］几乎不会在意语言的可用性，甚至恰恰相反，会故意增加使用难度。</p>
  </blockquote>
  <figcaption>
   <cite>—— 张凯强<a href="https://cloud.tencent.com/developer/article/1560964">《文言文编程火了，可我完全学不懂》</a></cite>
   </figcaption>
 </figure>
</aside>

<p>“文言”被洛谷网移除前，不乏有人用这门语言来解算法题，这就不得不用到嵌入 JavaScript 代码的 hack。由于“文言”代码需要先编译成 JavaScript代码才能运行，而编译器没有很严格地检查代码是否符合正常语法，我们可以轻松地注入 JavaScript 表达式：</p>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ow">施</span><span class="p">「(</span><span class="nx">str</span><span class="o">=&gt;</span><span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nx">str</span><span class="p">))」</span><span class="ow">於</span><span class="s">『問天地好在』</span><span class="p">。</span><span class="w">
</span></code></pre></div></div>

<p>在这句代码中直接嵌入了一个 JavaScript 箭头函数 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">str</span> <span class="o">=&gt;</span> <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span></code>。利用这种方法，我们可以调用 Node.js 环境下的标准库来实现读取输入。但问题是，如果直接读取 <code class="language-plaintext highlighter-rouge">/dev/stdin</code> 的内容，就必须一次读取完整个输入数据，而无法在命令行进行人机交互。</p>

<p>如果是 Node.js 开发，一般会采用原生的 <code class="language-plaintext highlighter-rouge">readline</code> 模块来读取用户输入。但它是异步运行的，要想用它来给“文言”程序读取输入，大概需要修改整个“文言”编译器的代码，让它编译出支持异步的程序，这似乎不太现实。于是我通过查阅各种资料，摸索出来了不使用异步操作读取命令行输入的办法：</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// gets.js</span>

<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)</span>
<span class="kd">const</span> <span class="nx">SEGMENT_LEN</span> <span class="o">=</span> <span class="mi">1024</span>
<span class="kd">const</span> <span class="nx">EOL_BUFFER</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">os</span><span class="dl">"</span><span class="p">).</span><span class="nx">EOL</span><span class="p">)</span>

<span class="kd">function</span> <span class="nf">gets</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// 缓冲区，以及已读入的字节数</span>
  <span class="kd">let</span> <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nf">alloc</span><span class="p">(</span><span class="nx">SEGMENT_LEN</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">len</span> <span class="o">=</span> <span class="mi">0</span>

  <span class="k">while </span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 读取一字节，如果 EOF 就停止读入</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nf">readSync</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">buffer</span><span class="p">,</span> <span class="nx">len</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="k">break</span>
    <span class="o">++</span><span class="nx">len</span>

    <span class="c1">// 如果已经换行就停止读入</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">buffer</span><span class="p">.</span><span class="nf">subarray</span><span class="p">(</span><span class="nx">len</span> <span class="o">-</span> <span class="nx">EOL_BUFFER</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">len</span><span class="p">).</span><span class="nf">equals</span><span class="p">(</span><span class="nx">EOL_BUFFER</span><span class="p">))</span> <span class="k">break</span>

    <span class="c1">// 如果缓冲区已经写满就扩容</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">len</span> <span class="o">===</span> <span class="nx">buffer</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">oldBuffer</span> <span class="o">=</span> <span class="nx">buffer</span>
      <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nf">alloc</span><span class="p">(</span><span class="nx">oldBuffer</span><span class="p">.</span><span class="nx">length</span> <span class="o">+</span> <span class="nx">SEGMENT_LEN</span><span class="p">)</span>
      <span class="nx">buffer</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">oldBuffer</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="nx">buffer</span><span class="p">.</span><span class="nf">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">len</span><span class="p">).</span><span class="nf">toString</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></div></div>

<p>这里声明了一个 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nf">gets</span><span class="p">()</span></code> 函数，可以读取一行用户输入。方法稍显笨拙：每次用 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">fs</span><span class="p">.</span><span class="nf">readSync</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></code> 读取一个字节，这里如果用户还没有输入完成并按下回车，就会阻塞程序，等待用户输入；用户按下回车后，程序就会逐字节地读取输入的内容，直到遇到换行符为止。</p>

<aside class="card my-3 p-3 pb-0">
  <p>注意我传给 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">fs</span><span class="p">.</span><span class="nf">readSync</span><span class="p">()</span></code> 的第一个参数 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="mi">0</span></code> 实际上是标准输入的文件描述符 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">.</span><span class="nx">fd</span></code>，由于这样写有时会出问题就改成了直接的 <code class="language-javascript highlight language-javascript highlighter-rouge"><span class="mi">0</span></code>。</p>
</aside>

<p>原型有了，就可以用“文言”来实现了。我定义了一个 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="p">「</span><span class="nv">閱行</span><span class="p">」</span></code> 函数，并给它创建了语法糖 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge">閱<span class="m">一</span>行</code>、<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge">閱<span class="m">二</span>行</code>、<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge">閱<span class="m">三</span>行</code> ……一直到 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge">閱<span class="m">九</span>行</code>，分别对应调用函数 <code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="p">「</span><span class="nv">閱行</span><span class="p">」</span></code> 一次至九次。这样一来，我们就可以很方便地连续读取多行输入：</p>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code>閱<span class="m">三</span>行<span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">乙</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">丙</span><span class="p">」。</span><span class="w">
</span></code></pre></div></div>

<p>这就相当于：</p>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ow">施</span><span class="p">「</span><span class="nf">閱行</span><span class="p">」。</span><span class="ow">施</span><span class="p">「</span><span class="nf">閱行</span><span class="p">」。</span><span class="ow">施</span><span class="p">「</span><span class="nf">閱行</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">乙</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">丙</span><span class="p">」。</span><span class="w">
</span></code></pre></div></div>

<p>不过，在解算法题的时候，我们往往需要从输入中读入数字、字符、单词，而不是读取一整行，所以我还添加了这些读取特定类型数据的方法：<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="p">「</span><span class="nv">閱數</span><span class="p">」</span></code>、<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="p">「</span><span class="nv">閱字</span><span class="p">」</span></code>、<code lang="lzh-Hant" class="language-wenyan highlight language-wenyan highlighter-rouge"><span class="p">「</span><span class="nv">閱言</span><span class="p">」</span></code>，并为它们定义了相应的语法糖。</p>

<p>这样一来，用“文言”来解 <a href="https://www.luogu.com.cn/problem/P1001">A+B Problem</a> 就可以这样写：</p>

<div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code>閱<span class="m">二</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="kd">曰</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="w">
</span><span class="ow">加</span><span class="p">「</span><span class="nv">甲</span><span class="p">」</span><span class="ow">以</span><span class="p">「</span><span class="nv">乙</span><span class="p">」。</span><span class="ow">書之</span><span class="p">。</span><span class="w">
</span></code></pre></div></div>

<p>当然，要想得到正确的输出，我们不能直接用“文言”的解释器来运行这个程序，因为这样会输出中文数字；需要先把程序编译成 JavaScript，再调用 Node.js 运行编译出的代码。</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wenyan <span class="nt">-c</span> program.wy <span class="o">&gt;</span> compiled.js
node compiled.js &lt; input.txt <span class="o">&gt;</span> output.txt
</code></pre></div></div>

<p>在“文言”编程中，输出被称作“<strong lang="lzh-Hant">書</strong>”，那么读取输入不妨叫做 “<strong lang="lzh-Hant">閱</strong>”；许多第三方的扩展库都叫做“某某<strong lang="lzh-Hant">秘術</strong>”，因此我决定把我的这个库命名为“<strong lang="lzh-Hant">閱文秘術</strong>”。</p>

<p><a href="https://github.com/DGCK81LNN/wenyan-stdin">这里</a>是“<strong lang="lzh-Hant">閱文秘術</strong>”的 GitHub 仓库。</p>

<aside class="accordion my-3">
<div class="accordion-item">
<h2 class="accordion-header">
<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse1" aria-expanded="false" aria-controls="collapse1">图片</button>
</h2>
<div class="accordion-collapse collapse" id="collapse1">
<div class="accordion-body pb-0">
        <p style="max-width: 500px; display: block; margin: auto;"><img src="/blog/assets/2022-01-18-1.jpg" alt="“閱文秘術”的代码中用到了很多嵌入的 JavaScript 表达式，它们跟“文言”代码的古汉语结合在一起，整体看起来十分怪异。" /></p>

        <p style="max-width: 500px; display: block; margin: auto;"><img src="/blog/assets/2022-01-18-2.jpg" alt="我节选了“閱文秘術”的一部分代码发给朋友，他形象地称嵌入的 JavaScript 表达式为“来自西洋巫术的神秘咒语”。" /></p>
      </div></div></div>
<div class="accordion-item">
<h2 class="accordion-header">
<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse2" aria-expanded="false" aria-controls="collapse2">“閱文秘術”的完整源代码，带语法高亮</button>
</h2>
<div class="accordion-collapse collapse" id="collapse2">
<div class="accordion-body pb-0">
        <div lang="lzh-Hant" class="language-wenyan highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">夫</span><span class="p">「</span><span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">)」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">fs</span><span class="p">」。</span><span class="w">
</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">物</span><span class="p">。</span><span class="kd">曰</span><span class="p">「</span><span class="nx">Buffer</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">os</span><span class="dl">"</span><span class="p">).</span><span class="nx">EOL</span><span class="p">)」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">行尾</span><span class="p">」。</span><span class="w">
</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">言</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">文</span><span class="p">」。</span><span class="w">
</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">爻</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">載畢</span><span class="p">」。</span><span class="w">

</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">載文</span><span class="p">」。</span><span class="k">是術曰</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">載畢</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="k">乃歸空無</span><span class="p">。</span><span class="w">
  </span><span class="k">或若</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="ow">之長不等於</span><span class="m">零</span><span class="kp">者</span><span class="p">。</span><span class="w">
    </span><span class="c">注曰。『既載之文尚未閱畢。不消更載。』</span><span class="w">
    </span><span class="k">乃歸空無也</span><span class="p">。</span><span class="w">

  </span><span class="kd">吾有</span><span class="m">一</span><span class="kt">物</span><span class="p">。</span><span class="kd">曰</span><span class="p">「</span><span class="nx">Buffer</span><span class="p">.</span><span class="nf">alloc</span><span class="p">(</span><span class="mi">0</span><span class="p">)」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">器</span><span class="p">」。</span><span class="w">
  </span><span class="kd">吾有</span><span class="m">一</span><span class="kt">數</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">器容</span><span class="p">」。</span><span class="w">

  </span><span class="k">恆為是</span><span class="p">。</span><span class="w">
    </span><span class="k">若</span><span class="p">「</span><span class="nv">器容</span><span class="p">」</span><span class="ow">等於</span><span class="p">「</span><span class="nv">器</span><span class="p">」</span><span class="ow">之長</span><span class="kp">者</span><span class="p">。</span><span class="w">
      </span><span class="kd">夫</span><span class="p">「</span><span class="nv">器</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">舊器</span><span class="p">」。</span><span class="w">
      </span><span class="kd">夫</span><span class="p">「</span><span class="nv">舊器</span><span class="p">」</span><span class="ow">之長</span><span class="p">。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="m">一千零二十四</span><span class="p">。</span><span class="ow">施</span><span class="p">「</span><span class="nx">Buffer</span><span class="p">.</span><span class="nx">alloc</span><span class="p">」</span><span class="ow">於</span><span class="kc">其</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">器</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
      </span><span class="ow">施</span><span class="p">「(</span><span class="nx">n</span><span class="o">=&gt;</span><span class="nx">o</span><span class="o">=&gt;</span><span class="nx">n</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="nx">o</span><span class="p">))」</span><span class="ow">於</span><span class="p">「</span><span class="nv">器</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">舊器</span><span class="p">」。</span><span class="w">
      </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">舊器</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">null</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="k">云云</span><span class="p">。</span><span class="w">
    </span><span class="ow">施</span><span class="p">「(</span><span class="nx">sup</span><span class="o">=&gt;</span><span class="nx">sub</span><span class="o">=&gt;</span><span class="nx">len</span><span class="o">=&gt;</span><span class="nx">sup</span><span class="p">.</span><span class="nf">subarray</span><span class="p">(</span><span class="nx">len</span><span class="o">-</span><span class="nx">sub</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">len</span><span class="p">).</span><span class="nf">equals</span><span class="p">(</span><span class="nx">sub</span><span class="p">))」</span><span class="ow">於</span><span class="p">「</span><span class="nv">器</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">行尾</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">器容</span><span class="p">」。</span><span class="w">
    </span><span class="k">若其然者乃止也</span><span class="p">。</span><span class="w">

    </span><span class="ow">施</span><span class="p">「(</span><span class="nx">buf</span><span class="o">=&gt;</span><span class="nx">len</span><span class="o">=&gt;</span><span class="nx">fs</span><span class="p">.</span><span class="nf">readSync</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">buf</span><span class="p">,</span><span class="nx">len</span><span class="p">,</span><span class="mi">1</span><span class="p">))」</span><span class="ow">於</span><span class="p">「</span><span class="nv">器</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">器容</span><span class="p">」。</span><span class="w">
    </span><span class="k">若</span><span class="kc">其</span><span class="ow">等於</span><span class="m">零</span><span class="kp">者</span><span class="p">。</span><span class="w">
      </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">載畢</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="l">陽</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
      </span><span class="k">乃止也</span><span class="p">。</span><span class="w">
    </span><span class="ow">加</span><span class="p">「</span><span class="nv">器容</span><span class="p">」</span><span class="ow">以</span><span class="m">一</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">器容</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">云云</span><span class="p">。</span><span class="w">

  </span><span class="k">若</span><span class="p">「</span><span class="nv">器容</span><span class="p">」</span><span class="ow">不等於</span><span class="m">零</span><span class="kp">者</span><span class="p">。</span><span class="w">
    </span><span class="ow">施</span><span class="p">「(</span><span class="nx">buf</span><span class="o">=&gt;</span><span class="nx">len</span><span class="o">=&gt;</span><span class="nx">buf</span><span class="p">.</span><span class="nf">subarray</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">len</span><span class="p">).</span><span class="nf">toString</span><span class="p">())」</span><span class="ow">於</span><span class="p">「</span><span class="nv">器</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">器容</span><span class="p">」。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">於</span><span class="p">「</span><span class="nv">文</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">云云</span><span class="p">。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">載文</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">

</span><span class="kd">今有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">閱畢乎</span><span class="p">」。</span><span class="k">是術曰</span><span class="p">。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">載畢</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="k">若</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="ow">之長等於</span><span class="m">零</span><span class="kp">者</span><span class="p">。</span><span class="k">乃得</span><span class="l">陽</span><span class="k">也云云</span><span class="p">。</span><span class="w">
  </span><span class="k">乃得</span><span class="l">陰</span><span class="p">。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">閱畢乎</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『若已閱畢者』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱畢乎」。若其然者』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『若未閱畢者』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱畢乎」。若其不然者』</span><span class="p">。</span><span class="w">

</span><span class="kd">今有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">閱行</span><span class="p">」。</span><span class="k">是術曰</span><span class="p">。</span><span class="w">
  </span><span class="ow">施</span><span class="p">「</span><span class="nf">載文</span><span class="p">」。</span><span class="kd">噫</span><span class="p">。</span><span class="k">若</span>已閱畢<span class="kp">者</span><span class="k">乃歸空無也</span><span class="p">。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">文</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
  </span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="s">『』</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">乃得</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">閱行</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱一行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱二行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱三行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱四行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」。施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱五行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱六行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱七行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱八行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱九行』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」。施「閱行」』</span><span class="p">。</span><span class="w">

</span><span class="kd">今有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">閱字</span><span class="p">」。</span><span class="k">是術曰</span><span class="p">。</span><span class="w">
  </span><span class="ow">施</span><span class="p">「</span><span class="nf">載文</span><span class="p">」。</span><span class="kd">噫</span><span class="p">。</span><span class="k">若</span>已閱畢<span class="kp">者</span><span class="k">乃歸空無也</span><span class="p">。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="ow">之</span><span class="m">一</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">字</span><span class="p">」。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="ow">之其餘</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">乃得</span><span class="p">「</span><span class="nv">字</span><span class="p">」。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">閱字</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱一字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱二字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱三字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱四字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」。施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱五字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱六字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱七字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱八字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱九字』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」。施「閱字」』</span><span class="p">。</span><span class="w">

</span><span class="kd">吾有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">閱物</span><span class="p">」。</span><span class="kd">欲行是術</span><span class="p">。</span><span class="k">必先得</span><span class="m">一</span><span class="kt">物</span><span class="p">。</span><span class="kd">曰</span><span class="p">「</span><span class="nv">識物譜</span><span class="p">」。</span><span class="kd">乃行是術曰</span><span class="p">。</span><span class="w">
  </span><span class="ow">施</span><span class="p">「</span><span class="nf">載文</span><span class="p">」。</span><span class="kd">噫</span><span class="p">。</span><span class="k">若</span>已閱畢<span class="kp">者</span><span class="k">乃歸空無也</span><span class="p">。</span><span class="w">
  </span><span class="ow">施</span><span class="p">「(</span><span class="nx">s</span><span class="o">=&gt;</span><span class="nx">r</span><span class="o">=&gt;</span><span class="nx">s</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="nx">r</span><span class="p">))」</span><span class="ow">於</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">識物譜</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">識</span><span class="p">」。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">識</span><span class="p">」。</span><span class="k">若其不然者</span><span class="p">。</span><span class="k">乃歸空無也</span><span class="p">。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">識</span><span class="p">」</span><span class="ow">之</span><span class="m">一</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
  </span><span class="kd">夫</span><span class="p">「</span><span class="nv">文</span><span class="p">」。</span><span class="kd">夫</span><span class="p">「</span><span class="nv">言</span><span class="p">」</span><span class="ow">之長</span><span class="p">。</span><span class="ow">取</span><span class="m">二</span><span class="ow">以施</span><span class="p">「(</span><span class="nx">s</span><span class="o">=&gt;</span><span class="nx">start</span><span class="o">=&gt;</span><span class="nx">s</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="nx">start</span><span class="p">))」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">乃得</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">閱物</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">

</span><span class="kd">今有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">閱白</span><span class="p">」。</span><span class="k">是術曰</span><span class="p">。</span><span class="w">
  </span><span class="kd">吾有</span><span class="m">一</span><span class="kt">言</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
  </span><span class="k">恆為是</span><span class="p">。</span><span class="w">
    </span><span class="ow">施</span><span class="p">「</span><span class="nf">載文</span><span class="p">」。</span><span class="kd">噫</span><span class="p">。</span><span class="w">
    </span><span class="ow">施</span><span class="p">「</span><span class="nf">閱物</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="sr">/^</span><span class="se">\s</span><span class="sr">+/</span><span class="p">」。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">於</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">言</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="kc">其</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
    </span><span class="k">若</span>已閱畢<span class="kp">者</span><span class="k">乃止也</span><span class="p">。</span><span class="w">
    </span><span class="k">若</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="ow">之長不等於</span><span class="m">零</span><span class="kp">者</span><span class="p">。</span><span class="k">乃止也</span><span class="p">。</span><span class="w">
  </span><span class="k">云云</span><span class="p">。</span><span class="w">
  </span><span class="k">乃得</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">閱白</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱一白』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱白」』</span><span class="p">。</span><span class="w">

</span><span class="kd">今有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">閱言</span><span class="p">」。</span><span class="k">是術曰</span><span class="p">。</span><span class="w">
  </span>閱<span class="m">一</span>白<span class="p">。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="p">「</span><span class="nv">文</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">原文</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span>已閱畢<span class="kp">者</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">原文</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="k">乃歸空無也</span><span class="p">。</span><span class="w">
  </span><span class="ow">施</span><span class="p">「</span><span class="nf">閱物</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="sr">/^</span><span class="se">\s</span><span class="sr">*</span><span class="se">(\S</span><span class="sr">+</span><span class="se">)</span><span class="sr">/</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">言</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="ow">施</span><span class="p">「(</span><span class="nx">s</span><span class="o">=&gt;</span><span class="nx">s</span><span class="p">.</span><span class="nf">trim</span><span class="p">())」</span><span class="ow">於</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="k">乃得矣</span><span class="p">。</span><span class="w">
  </span><span class="k">若非</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">原文</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">云云</span><span class="p">。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">閱言</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱一言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱二言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱三言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱四言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」。施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱五言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱六言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱七言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱八言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱九言』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」。施「閱言」』</span><span class="p">。</span><span class="w">

</span><span class="kd">今有</span><span class="m">一</span><span class="kt">術</span><span class="p">。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nf">閱數</span><span class="p">」。</span><span class="k">是術曰</span><span class="p">。</span><span class="w">
  </span>閱<span class="m">一</span>白<span class="p">。</span><span class="ow">加</span><span class="kc">其</span><span class="ow">以</span><span class="p">「</span><span class="nv">文</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">原文</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span>已閱畢<span class="kp">者</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">原文</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="k">乃歸空無也</span><span class="p">。</span><span class="w">
  </span><span class="ow">施</span><span class="p">「</span><span class="nf">閱物</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="sr">/^</span><span class="se">\s</span><span class="sr">*-</span><span class="se">?(?:</span><span class="sr">0|</span><span class="se">[</span><span class="sr">1-9</span><span class="se">]\d</span><span class="sr">*</span><span class="se">)(?:\.\d</span><span class="sr">+</span><span class="se">)?(?:[</span><span class="sr">Ee</span><span class="se">][</span><span class="sr">+-</span><span class="se">]?\d</span><span class="sr">+</span><span class="se">)?</span><span class="sr">/</span><span class="p">」。</span><span class="kd">名之曰</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="w">
  </span><span class="k">若</span><span class="p">「</span><span class="nv">言</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="ow">施</span><span class="p">「</span><span class="nf">parseFloat</span><span class="p">」</span><span class="ow">於</span><span class="p">「</span><span class="nv">言</span><span class="p">」。</span><span class="k">乃得矣</span><span class="p">。</span><span class="w">
  </span><span class="k">若非</span><span class="p">。</span><span class="kd">昔之</span><span class="p">「</span><span class="nv">文</span><span class="p">」</span><span class="kp">者</span><span class="p">。</span><span class="kd">今</span><span class="p">「</span><span class="nv">原文</span><span class="p">」</span><span class="kd">是矣</span><span class="p">。</span><span class="w">
  </span><span class="k">云云</span><span class="p">。</span><span class="w">
</span><span class="kd">是謂</span><span class="p">「</span><span class="nf">閱數</span><span class="p">」</span><span class="kd">之術也</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱一數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱二數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱三數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱四數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」。施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱五數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱六數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱七數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱八數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span><span class="k">或云</span><span class="s">『閱九數』</span><span class="p">。</span><span class="k">蓋謂</span><span class="s">『施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」。施「閱數」』</span><span class="p">。</span><span class="w">
</span></code></pre></div>        </div>
      </div></div></div>
</aside>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="esolang" /><summary type="html"><![CDATA[“文言”编程语言能读取标准输入了 前不久我给“文言”写了个扩展库，让它能够通过 Node.js 读取标准输入。现已被收入“文言”的包管理系统“文淵閣”。 研究过这门深奥编程语言的朋友可能知道，“文言”中没有原生的办法来读取标准输入。我猜测这大概也是洛谷网不再支持这门语言的原因之一。]]></summary></entry><entry><title type="html">给 Jekyll 博客添加评论区</title><link href="https://dgck81lnn.github.io/blog/posts/211231_blog_comments" rel="alternate" type="text/html" title="给 Jekyll 博客添加评论区" /><published>2021-12-31T21:51:40+08:00</published><updated>2021-12-31T21:51:40+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/blog_comments</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/211231_blog_comments"><![CDATA[<h1 id="给-jekyll-博客添加评论区">给 Jekyll 博客添加评论区</h1>

<p>近日我给这个博客添加了评论区。因为是使用 <a href="https://pages.github.com/">Github Pages</a> 和 <a href="https://jekyllcn.com/">Jekyll</a> 构建的静态网页博客，不方便实时地把评论添加到网站上。</p>

<p>给静态博客添加评论区的一个常见方法是使用 <a href="https://disqus.com/">Disqus</a>。这是一个博客评论平台，只需在自己的静态站上引用相应的脚本，就可以创建一个评论区。</p>

<p><img src="/blog/assets/2021-12-31-disqus.jpg" alt="在评论区上方还可以选择表情符号进行快速互动。" /></p>

<p>不过，Disqus 在中国大陆无法访问，而其它类似的平台基本都没有免费订阅方案，所以我放弃了这个方法，使用了一种另类的办法。</p>

<p>我用问卷星创建了<a href="https://www.wjx.top/vm/rljkHbJ.aspx">一个表单</a>用来接收评论；在 Jekyll 博客中添加了一个 <code class="language-plaintext highlighter-rouge">comments</code> 数据文件，用来存储全站的所有评论：</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="pi">-</span> <span class="na">date</span><span class="pi">:</span> <span class="s">2021-12-30T22:08:41+0800</span>
  <span class="na">post_url</span><span class="pi">:</span> <span class="s2">"</span><span class="s">/posts/210306_rouge_test"</span>
  <span class="na">nickname</span><span class="pi">:</span> <span class="s2">"</span><span class="s">DGCK81LNN"</span>
  <span class="na">email</span><span class="pi">:</span> <span class="s2">"</span><span class="s">triluolnn@163.com"</span>
  <span class="na">homepage</span><span class="pi">:</span> <span class="s2">"</span><span class="s">https://github.com/DGCK81LNN"</span>
  <span class="na">content</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">这是一条测试评论</span>
  <span class="na">reply</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">这是一条测试回复</span>
</code></pre></div></div>

<p>一旦有人评论（不会真的有吧😅），我就手动把评论写进数据文件中。</p>

<p>我还写了<a href="https://github.com/DGCK81LNN/blog/blob/24fa2788508f7b938ae7db03f2c96d65520a0371/_plugins/myfilters.rb">一个 Liquid 扩展</a>来显示 Gravatar 头像，因为需要对用户的邮箱地址生成 MD5 哈希。虽然 Gravatar 在国内一样无法访问，不过可以用 loli.net 镜像站。</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>https://gravatar.loli.net/avatar/b57408c9ef25d27a791ba9b871aa03f9
</code></pre></div></div>

<p><img src="https://gravatar.loli.net/avatar/b57408c9ef25d27a791ba9b871aa03f9" alt="使用这个网址应该就可以正常显示出我的头像。" /></p>

<p>这个扩展里还有一个 Liquid 过滤器，可以把邮箱地址中的一些字符改成英文单词（如：triluolnn at 163 dot com）。</p>

<p>然后，在布局模板里添加了评论区的代码。值得注意的是，通过判断 <code class="language-plaintext highlighter-rouge">page.collection</code> 的值，可以只在博文中显示评论区：（Jekyll 文档的“变量”一页上好像没提这个变量）</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">{%-</span><span class="w"> </span><span class="nt">if</span><span class="w"> </span><span class="nv">page</span><span class="p">.</span><span class="nv">collection</span><span class="w"> </span><span class="o">==</span><span class="w"> </span><span class="s2">"posts"</span><span class="w"> </span><span class="cp">%}</span>
</code></pre></div></div>

<p><a href="/blog/posts/210306_rouge_test">这篇博文</a>下有一条测试评论，可以看到评论的显示效果，我自己觉得比较满意。</p>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="日常写代码" /><summary type="html"><![CDATA[给 Jekyll 博客添加评论区 近日我给这个博客添加了评论区。因为是使用 Github Pages 和 Jekyll 构建的静态网页博客，不方便实时地把评论添加到网站上。 给静态博客添加评论区的一个常见方法是使用 Disqus。这是一个博客评论平台，只需在自己的静态站上引用相应的脚本，就可以创建一个评论区。]]></summary></entry><entry><title type="html">用自动脚本整理 Derpibooru 图集</title><link href="https://dgck81lnn.github.io/blog/posts/210818_rearranging_derpibooru_gallery" rel="alternate" type="text/html" title="用自动脚本整理 Derpibooru 图集" /><published>2021-08-18T00:00:00+08:00</published><updated>2022-04-15T11:35:00+08:00</updated><id>https://dgck81lnn.github.io/blog/posts/rearranging_derpibooru_gallery</id><content type="html" xml:base="https://dgck81lnn.github.io/blog/posts/210818_rearranging_derpibooru_gallery"><![CDATA[<h1 id="用自动脚本整理-derpibooru-图集">用自动脚本整理 <a href="https://derpibooru.org">Derpibooru</a> 图集</h1>

<p>我在 Derpibooru 做了一个图集“<a href="https://derpibooru.org/galleries/14196">M6就要整整齐齐</a>”，里面的图片都是每6张为一组。我今天写了一个自动脚本来给这个图集的图片整理排序。</p>

<p>Derpibooru 官方没有提供修改图集内图片顺序的 <abbr title="应用程序编程接口">API</abbr>；我通过浏览器开发者工具找到了这个 <abbr title="应用程序编程接口">API</abbr>。它的工作原理很迷，我没有看懂……<del>废话，我不会 <a href="https://elixir-lang.org/">Elixir</a>。</del><a href="https://github.com/derpibooru/philomena/blob/355ce491accae4702f273334271813e93a261e0f/lib/philomena/galleries.ex#L277:L339">这是它的源代码</a>。</p>

<p>以下代码需要在 Derpibooru 页面上用开发组工具的控制台运行，因为它使用了相对路径的 <abbr title="应用程序编程接口">API</abbr> 网址和全局对象 <code class="language-plaintext highlighter-rouge">booru</code>。在其他基于 <span lang="en"><a href="https://github.com/derpibooru/philomena">Philomena</a></span> 的图站上应该也可以运行，但要记得修改 <code class="language-plaintext highlighter-rouge">filterId</code>。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">galleryId</span> <span class="o">=</span> <span class="mi">14196</span><span class="p">;</span> <span class="c1">// 图集ID</span>
  <span class="kd">const</span> <span class="nx">perSet</span> <span class="o">=</span> <span class="mi">6</span><span class="p">;</span> <span class="c1">// 每个图组的图片数量</span>
  <span class="kd">const</span> <span class="nx">perPage</span> <span class="o">=</span> <span class="mi">50</span><span class="p">;</span> <span class="c1">// 获取图集内所有图片时，每页返回多少张（最高50）</span>
  <span class="kd">const</span> <span class="nx">filterId</span> <span class="o">=</span> <span class="mi">56027</span><span class="p">;</span> <span class="c1">// 图片过滤器编号（这里使用的是 Everything）</span>

  <span class="kd">const</span> <span class="nx">listImagesApi</span> <span class="o">=</span> <span class="s2">`/api/v1/json/search/images?q=gallery_id:</span><span class="p">${</span><span class="nx">galleryId</span><span class="p">}</span><span class="s2">&amp;sf=gallery_id:</span><span class="p">${</span><span class="nx">galleryId</span><span class="p">}</span><span class="s2">&amp;sd=asc&amp;filter_id=</span><span class="p">${</span><span class="nx">filterId</span><span class="p">}</span><span class="s2">&amp;per_page=</span><span class="p">${</span><span class="nx">perPage</span><span class="p">}</span><span class="s2">&amp;page=`</span><span class="p">;</span>
  <span class="kd">const</span> <span class="nx">orderImagesApi</span> <span class="o">=</span> <span class="s2">`/galleries/</span><span class="p">${</span><span class="nx">galleryId</span><span class="p">}</span><span class="s2">/order`</span><span class="p">;</span>

  <span class="c1">// main procedure</span>
  <span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getImgList</span><span class="p">();</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">original data: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">current</span><span class="p">);</span>
  <span class="kd">var</span> <span class="nx">sorted</span> <span class="o">=</span> <span class="nf">sortImgs</span><span class="p">(</span><span class="nx">current</span><span class="p">);</span>
  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">sorted data: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">sorted</span><span class="p">);</span>
  <span class="k">await</span> <span class="nf">submitOrder</span><span class="p">([...</span><span class="nx">sorted</span><span class="p">].</span><span class="nf">reverse</span><span class="p">());</span>

  <span class="cm">/**
   * 获取图集内图片
   * @returns {number[]} 图片ID列表
   */</span>
  <span class="k">async</span> <span class="kd">function</span> <span class="nf">getImgList</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET IMAGE LIST...</span><span class="dl">"</span><span class="p">);</span>
    <span class="cm">/** @type {number[]} */</span> <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">do</span> <span class="p">{</span>
      <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="k">await </span><span class="p">(</span><span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">listImagesApi</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)).</span><span class="nf">text</span><span class="p">());</span>
      <span class="nx">result</span><span class="p">.</span><span class="nf">push</span><span class="p">(...</span><span class="nx">data</span><span class="p">[</span><span class="dl">"</span><span class="s2">images</span><span class="dl">"</span><span class="p">].</span><span class="nf">map</span><span class="p">((</span><span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">i</span><span class="p">[</span><span class="dl">"</span><span class="s2">id</span><span class="dl">"</span><span class="p">]));</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`✓ page </span><span class="p">${</span><span class="nx">i</span><span class="p">}</span><span class="s2"> of </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="dl">"</span><span class="s2">total</span><span class="dl">"</span><span class="p">]</span> <span class="o">/</span> <span class="nx">perPage</span><span class="p">)}</span><span class="s2">`</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">while </span><span class="p">(</span><span class="nx">i</span><span class="o">++</span> <span class="o">*</span> <span class="nx">perPage</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">[</span><span class="dl">"</span><span class="s2">total</span><span class="dl">"</span><span class="p">]);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`FETCH COMPLETE!`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">result</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="cm">/**
   * 排序图片：每个图组内图片按ID排序，图组按首张图片ID排序
   * @param {number[]} current 当前图片ID列表
   * @returns {number[]} 排序后的图片ID列表
   */</span>
  <span class="kd">function</span> <span class="nf">sortImgs</span><span class="p">(</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/** @type {number[][]} */</span> <span class="kd">var</span> <span class="nx">sets</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">current</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">perSet</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="kd">set</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">perSet</span><span class="p">);</span>
      <span class="kd">set</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span> <span class="o">-</span> <span class="nx">b</span><span class="p">);</span>
      <span class="nx">sets</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="kd">set</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="nx">sets</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
    <span class="k">return</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">flat</span><span class="p">();</span>
  <span class="p">}</span>

  <span class="cm">/**
   * 提交新的图片顺序到服务器
   * @param {number[]} sorted
   */</span>
  <span class="kd">function</span> <span class="nf">submitOrder</span><span class="p">(</span><span class="nx">sorted</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">SUBMITTING DATA...</span><span class="dl">"</span><span class="p">);</span>
    <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">();</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">PATCH</span><span class="dl">"</span><span class="p">,</span> <span class="nx">orderImagesApi</span><span class="p">);</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nf">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">);</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nf">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">x-csrf-token</span><span class="dl">"</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">booru</span><span class="p">.</span><span class="nx">csrfToken</span><span class="p">);</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span>
      <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span>
        <span class="na">image_ids</span><span class="p">:</span> <span class="p">[...</span><span class="nx">sorted</span><span class="p">],</span>
        <span class="na">_method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">PATCH</span><span class="dl">"</span>
      <span class="p">})</span>
    <span class="p">);</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">DONE!</span><span class="dl">"</span><span class="p">);</span>
        <span class="nf">resolve</span><span class="p">();</span>
      <span class="p">};</span>
      <span class="nx">xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nf">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">REQUEST FAILED!</span><span class="dl">"</span><span class="p">);</span>
      <span class="p">};</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">})().</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span>
</code></pre></div></div>

<h2 id="2022-02-16-edit">2022-02-16 EDIT</h2>

<p>我现在使用的最新代码。</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * @typedef {{
 *   comment_count: number,
 *   created_at: string,
 *   downvotes: number,
 *   faves: number,
 *   first_seen_at: string,
 *   id: number,
 *   score: number,
 *   size: number,
 *   tag_count: number,
 *   updated_at: string,
 *   upvotes: number,
 *   wilson_score: number,
 * }} ImageResponse
 */</span>

<span class="kd">const</span> <span class="nx">perPage</span> <span class="o">=</span> <span class="mi">50</span> <span class="c1">// 获取图集内所有图片时，每页返回多少张（最高50）</span>
<span class="kd">const</span> <span class="nx">filterId</span> <span class="o">=</span> <span class="mi">56027</span> <span class="c1">// 图片过滤器编号（Everything）</span>

<span class="cm">/**
 * 获取图集内图片
 * @param {number} galleryId 图集ID
 * @param {number} perSet 每个图组的图片数量
 */</span>
<span class="k">async</span> <span class="kd">function</span> <span class="nf">getImgList</span><span class="p">(</span><span class="nx">galleryId</span><span class="p">,</span> <span class="nx">perSet</span> <span class="o">=</span> <span class="mi">6</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">listImagesApi</span> <span class="o">=</span> <span class="s2">`/api/v1/json/search/images?q=gallery_id:</span><span class="p">${</span><span class="nx">galleryId</span><span class="p">}</span><span class="s2">&amp;sf=gallery_id:</span><span class="p">${</span><span class="nx">galleryId</span><span class="p">}</span><span class="s2">&amp;sd=asc&amp;filter_id=</span><span class="p">${</span><span class="nx">filterId</span><span class="p">}</span><span class="s2">&amp;per_page=</span><span class="p">${</span><span class="nx">perPage</span><span class="p">}</span><span class="s2">&amp;page=`</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET IMAGE LIST...</span><span class="dl">"</span><span class="p">)</span>
  <span class="cm">/** @type {ImageResponse[]} */</span> <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">1</span>

  <span class="k">do</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">data</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="k">await </span><span class="p">(</span><span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="nx">listImagesApi</span> <span class="o">+</span> <span class="nx">i</span><span class="p">)).</span><span class="nf">text</span><span class="p">())</span>
    <span class="nx">result</span><span class="p">.</span><span class="nf">push</span><span class="p">(...</span><span class="nx">data</span><span class="p">[</span><span class="dl">"</span><span class="s2">images</span><span class="dl">"</span><span class="p">])</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`✓ page </span><span class="p">${</span><span class="nx">i</span><span class="p">}</span><span class="s2"> of </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="nx">data</span><span class="p">[</span><span class="dl">"</span><span class="s2">total</span><span class="dl">"</span><span class="p">]</span> <span class="o">/</span> <span class="nx">perPage</span><span class="p">)}</span><span class="s2">`</span><span class="p">)</span>
  <span class="p">}</span> <span class="k">while </span><span class="p">(</span><span class="nx">i</span><span class="o">++</span> <span class="o">*</span> <span class="nx">perPage</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">[</span><span class="dl">"</span><span class="s2">total</span><span class="dl">"</span><span class="p">])</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="s2">`FETCH COMPLETE!`</span><span class="p">)</span>

  <span class="cm">/** @type {ImageResponse[][]} */</span> <span class="kd">var</span> <span class="nx">sets</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for </span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">result</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">perSet</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="kd">set</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">perSet</span><span class="p">)</span>
    <span class="nx">sets</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="kd">set</span><span class="p">)</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">sets</span>
<span class="p">}</span>

<span class="cm">/**
 * @param {ImageResponse[][]} sets
 */</span>
<span class="kd">function</span> <span class="nf">toIds</span><span class="p">(</span><span class="nx">sets</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">sets</span><span class="p">.</span><span class="nf">flat</span><span class="p">().</span><span class="nf">map</span><span class="p">(</span><span class="nx">img</span> <span class="o">=&gt;</span> <span class="nx">img</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">}</span>

<span class="cm">/**
 * 提交新的图片顺序到服务器
 * @param {number} galleryId 图集ID
 * @param {number[]} sorted
 */</span>
<span class="kd">function</span> <span class="nf">submitOrder</span><span class="p">(</span><span class="nx">galleryId</span><span class="p">,</span> <span class="nx">sorted</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">orderImagesApi</span> <span class="o">=</span> <span class="s2">`/galleries/</span><span class="p">${</span><span class="nx">galleryId</span><span class="p">}</span><span class="s2">/order`</span>

  <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">SUBMITTING DATA...</span><span class="dl">"</span><span class="p">)</span>
  <span class="kd">var</span> <span class="nx">xhr</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XMLHttpRequest</span><span class="p">()</span>
  <span class="nx">xhr</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="dl">"</span><span class="s2">PATCH</span><span class="dl">"</span><span class="p">,</span> <span class="nx">orderImagesApi</span><span class="p">)</span>
  <span class="nx">xhr</span><span class="p">.</span><span class="nf">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span><span class="p">)</span>
  <span class="nx">xhr</span><span class="p">.</span><span class="nf">setRequestHeader</span><span class="p">(</span><span class="dl">"</span><span class="s2">x-csrf-token</span><span class="dl">"</span><span class="p">,</span> <span class="nb">window</span><span class="p">.</span><span class="nx">booru</span><span class="p">.</span><span class="nx">csrfToken</span><span class="p">)</span>
  <span class="nx">xhr</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span>
    <span class="nx">JSON</span><span class="p">.</span><span class="nf">stringify</span><span class="p">({</span>
      <span class="na">image_ids</span><span class="p">:</span> <span class="p">[...</span><span class="nx">sorted</span><span class="p">],</span>
      <span class="na">_method</span><span class="p">:</span> <span class="dl">"</span><span class="s2">PATCH</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">})</span>
  <span class="p">)</span>

  <span class="k">return</span> <span class="k">new</span> <span class="nc">Promise</span><span class="p">((</span><span class="nx">resolve</span><span class="p">,</span> <span class="nx">reject</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">DONE!</span><span class="dl">"</span><span class="p">)</span>
      <span class="nf">resolve</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="nx">xhr</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nf">reject</span><span class="p">(</span><span class="dl">"</span><span class="s2">REQUEST FAILED!</span><span class="dl">"</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">})</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 整理主图集</span>

<span class="kd">var</span> <span class="nx">galleryId</span> <span class="o">=</span> <span class="mi">14196</span>
<span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getImgList</span><span class="p">(</span><span class="nx">galleryId</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">original data: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">coverIndex</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="nx">current</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="kd">set</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">set</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">l</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">l</span><span class="p">.</span><span class="nx">id</span> <span class="o">-</span> <span class="nx">r</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
  <span class="kd">set</span><span class="p">.</span><span class="nx">_wilsonSum</span> <span class="o">=</span> <span class="kd">set</span><span class="p">.</span><span class="nf">reduce</span><span class="p">((</span><span class="nx">s</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">s</span> <span class="o">+</span> <span class="nx">c</span><span class="p">.</span><span class="nx">wilson_score</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
  <span class="k">if </span><span class="p">(</span><span class="kd">set</span><span class="p">.</span><span class="nf">findIndex</span><span class="p">(</span><span class="nx">img</span> <span class="o">=&gt;</span> <span class="nx">img</span><span class="p">.</span><span class="nx">id</span> <span class="o">===</span> <span class="mi">2461114</span><span class="p">)</span> <span class="o">!==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="nx">coverIndex</span> <span class="o">=</span> <span class="nx">i</span>
<span class="p">})</span>
<span class="k">if </span><span class="p">(</span><span class="nx">coverIndex</span> <span class="o">===</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">throw</span> <span class="dl">"</span><span class="s2">cover set not found</span><span class="dl">"</span>
<span class="kd">var</span> <span class="nx">coverSet</span> <span class="o">=</span> <span class="nx">current</span><span class="p">[</span><span class="nx">coverIndex</span><span class="p">]</span>

<span class="kd">var</span> <span class="nx">wilsonSorted</span> <span class="o">=</span> <span class="nx">current</span><span class="p">.</span><span class="nf">slice</span><span class="p">()</span>
<span class="nx">wilsonSorted</span><span class="p">.</span><span class="nf">splice</span><span class="p">(</span><span class="nx">coverIndex</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="nx">wilsonSorted</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">l</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">r</span><span class="p">.</span><span class="nx">_wilsonSum</span> <span class="o">-</span> <span class="nx">l</span><span class="p">.</span><span class="nx">_wilsonSum</span><span class="p">)</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">toIds</span><span class="p">([</span>
  <span class="p">...</span><span class="nx">wilsonSorted</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="nf">sort</span><span class="p">((</span><span class="nx">l</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">l</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">id</span> <span class="o">-</span> <span class="nx">r</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">id</span><span class="p">),</span>
  <span class="p">...</span><span class="nx">wilsonSorted</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">).</span><span class="nf">reverse</span><span class="p">(),</span>
  <span class="nx">coverSet</span><span class="p">,</span>
<span class="p">])</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">sorted data: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>

<span class="k">await</span> <span class="nf">submitOrder</span><span class="p">(</span><span class="nx">galleryId</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nf">slice</span><span class="p">().</span><span class="nf">reverse</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 整理其他图集</span>

<span class="kd">var</span> <span class="nx">galleryId</span> <span class="o">=</span> <span class="mi">18473</span>
<span class="kd">var</span> <span class="nx">current</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">getImgList</span><span class="p">(</span><span class="nx">galleryId</span><span class="p">)</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">original data: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span>

<span class="nx">current</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="kd">set</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">set</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">l</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">l</span><span class="p">.</span><span class="nx">id</span> <span class="o">-</span> <span class="nx">r</span><span class="p">.</span><span class="nx">id</span><span class="p">)</span>
<span class="p">})</span>

<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nf">toIds</span><span class="p">(</span><span class="nx">current</span><span class="p">.</span><span class="nf">sort</span><span class="p">((</span><span class="nx">l</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">l</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">id</span> <span class="o">-</span> <span class="nx">r</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">id</span><span class="p">))</span>
<span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">"</span><span class="s2">sorted data: </span><span class="dl">"</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>

<span class="k">await</span> <span class="nf">submitOrder</span><span class="p">(</span><span class="nx">galleryId</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nf">slice</span><span class="p">().</span><span class="nf">reverse</span><span class="p">())</span>
</code></pre></div></div>]]></content><author><name>DGCK81LNN</name></author><category term="编程" /><category term="日常写代码" /><summary type="html"><![CDATA[用自动脚本整理 Derpibooru 图集 我在 Derpibooru 做了一个图集“M6就要整整齐齐”，里面的图片都是每6张为一组。我今天写了一个自动脚本来给这个图集的图片整理排序。 Derpibooru 官方没有提供修改图集内图片顺序的 API；我通过浏览器开发者工具找到了这个 API。它的工作原理很迷，我没有看懂……废话，我不会 Elixir。这是它的源代码。]]></summary></entry></feed>